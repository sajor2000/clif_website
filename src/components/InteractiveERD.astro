---
// Interactive ERD Component for CLIF 2.0.0
---

<div class="erd-section">
  <div class="erd-header">
    <h2 class="text-2xl font-bold mb-2">Interactive Entity Relationship Diagram</h2>
    <p class="text-gray-600 mb-4">
      Explore the relationships between all CLIF 2.0.0 tables. Click on entities to view details, search for specific tables or fields, and zoom/pan to navigate.
    </p>
  </div>

  <div class="er-diagram-container">
    <div class="controls">
      <input type="search" id="search" placeholder="Search entities or fields..." />
      <button id="reset-view">Reset View</button>
      <button id="toggle-relationships">Toggle Relationships</button>
    </div>

    <div id="diagram-wrapper">
      <svg id="er-diagram" viewBox="0 0 3000 2000" preserveAspectRatio="xMidYMid meet">
        <!-- Define markers for relationship arrows -->
        <defs>
          <marker id="arrow" markerWidth="10" markerHeight="10" refX="9" refY="3" orient="auto" markerUnits="strokeWidth">
            <path d="M0,0 L0,6 L9,3 z" fill="#333" />
          </marker>
        </defs>

        <!-- Relationships will be drawn first (behind entities) -->
        <g id="relationships"></g>
        
        <!-- Entities -->
        <g id="entities"></g>
      </svg>
    </div>

    <aside id="details-panel">
      <div class="panel-header">
        <h2 id="entity-name">Entity Details</h2>
        <button class="close-btn" id="close-details-btn">&times;</button>
      </div>
      <div class="panel-content">
        <h3>Fields</h3>
        <ul id="field-list" class="field-list"></ul>
        
        <h3 style="margin-top: 20px;">Relationships</h3>
        <ul id="relationship-list" class="field-list"></ul>
      </div>
    </aside>

    <div class="legend">
      <h4 style="margin: 0 0 10px 0; font-size: 14px;">Maturity Levels</h4>
      <div class="legend-item">
        <div class="legend-color" style="background: #E67E22; border: 1px solid #D35400;"></div>
        <span>Beta</span>
      </div>
      <div class="legend-item">
        <div class="legend-color" style="background: #F39C12; border: 1px solid #E67E22;"></div>
        <span>New</span>
      </div>
      <div class="legend-item">
        <div class="legend-color" style="background: #95A5A6; border: 1px solid #7F8C8D;"></div>
        <span>Concept</span>
      </div>
    </div>

    <div class="zoom-controls">
      <button class="zoom-btn" id="zoom-in">+</button>
      <button class="zoom-btn" id="zoom-out">−</button>
      <button class="zoom-btn" id="zoom-fit">⊡</button>
    </div>

    <div class="tooltip" id="tooltip"></div>
  </div>
</div>

<style>
  .erd-section {
    margin-bottom: 3rem;
  }

  .er-diagram-container {
    position: relative;
    height: 800px;
    background-color: #f5f5f5;
    border-radius: 8px;
    overflow: hidden;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }

  .controls {
    position: absolute;
    top: 20px;
    left: 20px;
    z-index: 10;
    background: white;
    padding: 15px;
    border-radius: 8px;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    display: flex;
    gap: 10px;
    align-items: center;
  }

  .controls input[type="search"] {
    padding: 8px 12px;
    border: 1px solid #ddd;
    border-radius: 4px;
    width: 250px;
    font-size: 14px;
  }

  .controls button {
    padding: 8px 16px;
    background: #841839;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-size: 14px;
    transition: background 0.3s;
  }

  .controls button:hover {
    background: #6d1430;
  }

  #diagram-wrapper {
    width: 100%;
    height: 100%;
    overflow: hidden;
    cursor: grab;
  }

  #diagram-wrapper:active {
    cursor: grabbing;
  }

  #er-diagram {
    width: 100%;
    height: 100%;
    transition: transform 0.3s ease;
  }

  .entity {
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .entity-rect {
    fill: white;
    stroke: #ddd;
    stroke-width: 1;
  }

  .entity-header {
    stroke-width: 0;
  }

  .entity.maturity-beta .entity-header {
    fill: #E67E22;
  }

  .entity.maturity-new .entity-header {
    fill: #F39C12;
  }

  .entity.maturity-concept .entity-header {
    fill: #95A5A6;
  }

  .entity:hover .entity-rect {
    stroke: #E67E22;
    stroke-width: 2;
    filter: drop-shadow(0 2px 4px rgba(0,0,0,0.2));
  }

  .entity.highlighted .entity-rect {
    stroke: #841839;
    stroke-width: 3;
    filter: drop-shadow(0 4px 8px rgba(132, 24, 57, 0.3));
  }

  .entity-name {
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Helvetica Neue', Arial, sans-serif;
    font-weight: bold;
    fill: white;
    font-size: 14px;
    text-transform: uppercase;
  }

  .field-text {
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Helvetica Neue', Arial, sans-serif;
    fill: #333;
    font-size: 12px;
  }

  .field-type {
    font-family: 'Courier New', Courier, monospace;
    fill: #666;
    font-size: 11px;
  }

  .maturity-badge {
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Helvetica Neue', Arial, sans-serif;
    font-size: 10px;
    font-weight: bold;
    fill: white;
    text-transform: uppercase;
  }

  .entity.dimmed {
    opacity: 0.3;
  }

  .relationship {
    transition: all 0.3s ease;
  }

  .relationship path {
    fill: none;
    stroke: #999;
    stroke-width: 1.5;
  }

  .relationship.highlighted path {
    stroke: #841839;
    stroke-width: 2.5;
  }

  .relationship.dimmed {
    opacity: 0.2;
  }

  #details-panel {
    position: absolute;
    right: -400px;
    top: 0;
    width: 400px;
    height: 100%;
    background: white;
    box-shadow: -2px 0 10px rgba(0,0,0,0.1);
    transition: right 0.3s ease;
    overflow-y: auto;
    z-index: 9;
  }

  #details-panel.show {
    right: 0;
  }

  .panel-header {
    padding: 20px;
    background: #f8f9fa;
    border-bottom: 1px solid #e9ecef;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .panel-content {
    padding: 20px;
  }

  .field-list {
    list-style: none;
    margin-top: 10px;
    padding: 0;
  }

  .field-item {
    padding: 8px;
    border-bottom: 1px solid #e9ecef;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .field-name {
    font-weight: 500;
  }

  .field-type {
    color: #6c757d;
    font-size: 0.9em;
  }

  .badge {
    display: inline-block;
    padding: 2px 8px;
    border-radius: 12px;
    font-size: 0.75em;
    font-weight: 500;
    margin-left: 8px;
  }

  .badge-pk {
    background: #841839;
    color: white;
  }

  .badge-fk {
    background: #6c757d;
    color: white;
  }

  .close-btn {
    background: none;
    border: none;
    font-size: 24px;
    cursor: pointer;
    color: #6c757d;
  }

  .legend {
    position: absolute;
    bottom: 20px;
    left: 20px;
    background: white;
    padding: 15px;
    border-radius: 8px;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
  }

  .legend-item {
    display: flex;
    align-items: center;
    margin-bottom: 8px;
  }

  .legend-item:last-child {
    margin-bottom: 0;
  }

  .legend-color {
    width: 20px;
    height: 20px;
    border-radius: 2px;
    margin-right: 10px;
  }

  .zoom-controls {
    position: absolute;
    bottom: 20px;
    right: 20px;
    background: white;
    border-radius: 8px;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    display: flex;
    flex-direction: column;
  }

  .zoom-btn {
    background: none;
    border: none;
    width: 40px;
    height: 40px;
    font-size: 20px;
    cursor: pointer;
    transition: background 0.3s;
  }

  .zoom-btn:hover {
    background: #f8f9fa;
  }

  .tooltip {
    position: absolute;
    background: rgba(0,0,0,0.8);
    color: white;
    padding: 8px 12px;
    border-radius: 4px;
    font-size: 14px;
    pointer-events: none;
    opacity: 0;
    transition: opacity 0.3s;
    z-index: 11;
  }

  .tooltip.show {
    opacity: 1;
  }

  @media (max-width: 768px) {
    .er-diagram-container {
      height: 600px;
    }

    .controls {
      max-width: 300px;
    }

    #details-panel {
      width: 320px;
      right: -320px;
    }
  }
</style>

<script>
  // Data structure for CLIF 2.0.0 entities
  const entities = [
    {
      id: 'patient',
      name: 'patient',
      maturity: 'beta',
      position: { x: 100, y: 100 },
      fields: [
        { name: 'patient_id', type: 'VARCHAR', isPK: true },
        { name: 'race_name', type: 'VARCHAR' },
        { name: 'race_category', type: 'VARCHAR' },
        { name: 'ethnicity_name', type: 'VARCHAR' },
        { name: 'ethnicity_category', type: 'VARCHAR' },
        { name: 'sex_name', type: 'VARCHAR' },
        { name: 'sex_category', type: 'VARCHAR' },
        { name: 'birth_date', type: 'DATE' },
        { name: 'death_dttm', type: 'DATETIME' }
      ]
    },
    {
      id: 'hospitalization',
      name: 'hospitalization',
      maturity: 'beta',
      position: { x: 500, y: 100 },
      fields: [
        { name: 'patient_id', type: 'VARCHAR', isFK: true },
        { name: 'hospitalization_id', type: 'VARCHAR', isPK: true },
        { name: 'admission_dttm', type: 'DATETIME' },
        { name: 'discharge_dttm', type: 'DATETIME' },
        { name: 'age_at_admission', type: 'INT' },
        { name: 'admission_type_name', type: 'VARCHAR' },
        { name: 'admission_type_category', type: 'VARCHAR' },
        { name: 'discharge_name', type: 'VARCHAR' },
        { name: 'discharge_category', type: 'VARCHAR' }
      ]
    },
    {
      id: 'adt',
      name: 'adt',
      maturity: 'beta',
      position: { x: 900, y: 100 },
      fields: [
        { name: 'hospitalization_id', type: 'VARCHAR', isPK: true, isFK: true },
        { name: 'hospital_id', type: 'VARCHAR' },
        { name: 'hospital_type', type: 'VARCHAR' },
        { name: 'in_dttm', type: 'DATETIME' },
        { name: 'out_dttm', type: 'DATETIME' },
        { name: 'location_name', type: 'VARCHAR' },
        { name: 'location_category', type: 'VARCHAR' }
      ]
    },
    {
      id: 'vitals',
      name: 'vitals',
      maturity: 'beta',
      position: { x: 1300, y: 100 },
      fields: [
        { name: 'hospitalization_id', type: 'VARCHAR', isFK: true },
        { name: 'recorded_dttm', type: 'DATETIME' },
        { name: 'vital_name', type: 'VARCHAR' },
        { name: 'vital_category', type: 'VARCHAR' },
        { name: 'vital_value', type: 'DOUBLE' },
        { name: 'vital_units', type: 'VARCHAR' }
      ]
    },
    {
      id: 'labs',
      name: 'labs',
      maturity: 'beta',
      position: { x: 100, y: 450 },
      fields: [
        { name: 'hospitalization_id', type: 'VARCHAR', isFK: true },
        { name: 'lab_order_id', type: 'VARCHAR' },
        { name: 'lab_order_name', type: 'VARCHAR' },
        { name: 'lab_order_type', type: 'VARCHAR' },
        { name: 'lab_name', type: 'VARCHAR' },
        { name: 'lab_category', type: 'VARCHAR' },
        { name: 'lab_loinc', type: 'VARCHAR' },
        { name: 'specimen_name', type: 'VARCHAR' },
        { name: 'specimen_category', type: 'VARCHAR' },
        { name: 'lab_value_text', type: 'VARCHAR' },
        { name: 'lab_value_numeric', type: 'DOUBLE' },
        { name: 'lab_units_name', type: 'VARCHAR' },
        { name: 'reference_range_upper', type: 'DOUBLE' },
        { name: 'reference_range_lower', type: 'DOUBLE' }
      ]
    },
    {
      id: 'medication_admin',
      name: 'medication_admin',
      maturity: 'beta',
      position: { x: 500, y: 450 },
      fields: [
        { name: 'hospitalization_id', type: 'VARCHAR', isFK: true },
        { name: 'admin_dttm', type: 'DATETIME' },
        { name: 'med_name', type: 'VARCHAR' },
        { name: 'med_category', type: 'VARCHAR' },
        { name: 'med_route_name', type: 'VARCHAR' },
        { name: 'med_route_category', type: 'VARCHAR' },
        { name: 'med_dose', type: 'DOUBLE' },
        { name: 'med_dose_unit', type: 'VARCHAR' }
      ]
    },
    {
      id: 'scores',
      name: 'scores',
      maturity: 'beta',
      position: { x: 900, y: 450 },
      fields: [
        { name: 'hospitalization_id', type: 'VARCHAR', isFK: true },
        { name: 'recorded_dttm', type: 'DATETIME' },
        { name: 'score_name', type: 'VARCHAR' },
        { name: 'score_category', type: 'VARCHAR' },
        { name: 'score_value', type: 'DOUBLE' },
        { name: 'score_unit', type: 'VARCHAR' }
      ]
    },
    {
      id: 'respiratory_support',
      name: 'respiratory_support',
      maturity: 'beta',
      position: { x: 1300, y: 450 },
      fields: [
        { name: 'hospitalization_id', type: 'VARCHAR', isFK: true },
        { name: 'recorded_dttm', type: 'DATETIME' },
        { name: 'device_name', type: 'VARCHAR' },
        { name: 'device_category', type: 'VARCHAR' },
        { name: 'mode_name', type: 'VARCHAR' },
        { name: 'mode_category', type: 'VARCHAR' },
        { name: 'fio2_set', type: 'DOUBLE' }
      ]
    },
    {
      id: 'position',
      name: 'position',
      maturity: 'beta',
      position: { x: 700, y: 800 },
      fields: [
        { name: 'hospitalization_id', type: 'VARCHAR', isFK: true },
        { name: 'recorded_dttm', type: 'DATETIME' },
        { name: 'position_name', type: 'VARCHAR' },
        { name: 'position_category', type: 'VARCHAR' }
      ]
    }
  ];

  // Relationships between entities
  const relationships = [
    { from: 'patient', to: 'hospitalization', field: 'patient_id' },
    { from: 'hospitalization', to: 'adt', field: 'hospitalization_id' },
    { from: 'hospitalization', to: 'vitals', field: 'hospitalization_id' },
    { from: 'hospitalization', to: 'labs', field: 'hospitalization_id' },
    { from: 'hospitalization', to: 'medication_admin', field: 'hospitalization_id' },
    { from: 'hospitalization', to: 'scores', field: 'hospitalization_id' },
    { from: 'hospitalization', to: 'respiratory_support', field: 'hospitalization_id' },
    { from: 'hospitalization', to: 'position', field: 'hospitalization_id' }
  ];

  // Initialize the diagram
  document.addEventListener('DOMContentLoaded', () => {
    const svg = document.getElementById('er-diagram');
    const diagramWrapper = document.getElementById('diagram-wrapper');
    const entitiesGroup = document.getElementById('entities');
    const relationshipsGroup = document.getElementById('relationships');
    const detailsPanel = document.getElementById('details-panel');
    const searchInput = document.getElementById('search');
    const resetViewBtn = document.getElementById('reset-view');
    const toggleRelBtn = document.getElementById('toggle-relationships');
    const zoomInBtn = document.getElementById('zoom-in');
    const zoomOutBtn = document.getElementById('zoom-out');
    const zoomFitBtn = document.getElementById('zoom-fit');
    const tooltip = document.getElementById('tooltip');

    let currentTransform = { x: 0, y: 0, scale: 1 };
    let isDragging = false;
    let startX, startY;
    let selectedEntity = null;
    let showRelationships = true;

    // Create entity elements
    function createEntityElement(entity) {
      const g = document.createElementNS('http://www.w3.org/2000/svg', 'g');
      g.classList.add('entity');
      g.classList.add(`maturity-${entity.maturity}`);
      g.setAttribute('data-entity', entity.id);
      g.setAttribute('transform', `translate(${entity.position.x}, ${entity.position.y})`);

      // Calculate entity dimensions
      const width = 250;
      const headerHeight = 35;
      const fieldHeight = 25;
      const padding = 10;
      const height = headerHeight + (entity.fields.length * fieldHeight) + padding * 2;

      // Entity background
      const rect = document.createElementNS('http://www.w3.org/2000/svg', 'rect');
      rect.classList.add('entity-rect');
      rect.setAttribute('width', width);
      rect.setAttribute('height', height);
      rect.setAttribute('rx', '4');
      g.appendChild(rect);

      // Header background
      const headerRect = document.createElementNS('http://www.w3.org/2000/svg', 'rect');
      headerRect.classList.add('entity-header');
      headerRect.setAttribute('width', width);
      headerRect.setAttribute('height', headerHeight);
      headerRect.setAttribute('rx', '4');
      g.appendChild(headerRect);

      // Entity name
      const nameText = document.createElementNS('http://www.w3.org/2000/svg', 'text');
      nameText.classList.add('entity-name');
      nameText.setAttribute('x', '10');
      nameText.setAttribute('y', headerHeight / 2 + 5);
      nameText.setAttribute('text-anchor', 'start');
      nameText.textContent = entity.name;
      g.appendChild(nameText);

      // Maturity badge
      if (entity.maturity) {
        const badgeText = document.createElementNS('http://www.w3.org/2000/svg', 'text');
        badgeText.classList.add('maturity-badge');
        badgeText.setAttribute('x', width - 10);
        badgeText.setAttribute('y', headerHeight / 2 + 4);
        badgeText.setAttribute('text-anchor', 'end');
        badgeText.textContent = entity.maturity.toUpperCase();
        g.appendChild(badgeText);
      }

      // Fields
      entity.fields.forEach((field, index) => {
        const yPos = headerHeight + padding + (index * fieldHeight) + fieldHeight/2;

        // Field name
        const fieldText = document.createElementNS('http://www.w3.org/2000/svg', 'text');
        fieldText.classList.add('field-text');
        fieldText.setAttribute('x', '10');
        fieldText.setAttribute('y', yPos + 3);
        fieldText.textContent = field.name;
        if (field.isPK || field.isFK) {
          fieldText.style.fontWeight = 'bold';
        }
        g.appendChild(fieldText);

        // Field type
        const typeText = document.createElementNS('http://www.w3.org/2000/svg', 'text');
        typeText.classList.add('field-type');
        typeText.setAttribute('x', width - 10);
        typeText.setAttribute('y', yPos + 3);
        typeText.setAttribute('text-anchor', 'end');
        typeText.textContent = field.type;
        g.appendChild(typeText);
      });

      // Add event listeners
      g.addEventListener('click', () => selectEntity(entity));
      g.addEventListener('mouseenter', (e) => showTooltip(e, entity));
      g.addEventListener('mouseleave', () => hideTooltip());

      return g;
    }

    // Create relationship paths
    function createRelationshipPath(rel) {
      const fromEntity = entities.find(e => e.id === rel.from);
      const toEntity = entities.find(e => e.id === rel.to);
      
      const path = document.createElementNS('http://www.w3.org/2000/svg', 'path');
      path.classList.add('relationship');
      path.setAttribute('data-from', rel.from);
      path.setAttribute('data-to', rel.to);
      
      // Calculate path
      const fromX = fromEntity.position.x + 250;
      const fromY = fromEntity.position.y + 50;
      const toX = toEntity.position.x;
      const toY = toEntity.position.y + 50;
      
      const midX = (fromX + toX) / 2;
      const midY = (fromY + toY) / 2;
      
      const d = `M ${fromX} ${fromY} Q ${midX} ${midY} ${toX} ${toY}`;
      path.setAttribute('d', d);
      path.setAttribute('marker-end', 'url(#arrow)');
      
      return path;
    }

    // Initialize entities and relationships
    entities.forEach(entity => {
      const entityEl = createEntityElement(entity);
      entitiesGroup.appendChild(entityEl);
    });

    relationships.forEach(rel => {
      const relPath = createRelationshipPath(rel);
      relationshipsGroup.appendChild(relPath);
    });

    // Pan and zoom functionality
    function updateTransform() {
      svg.style.transform = `translate(${currentTransform.x}px, ${currentTransform.y}px) scale(${currentTransform.scale})`;
    }

    diagramWrapper.addEventListener('mousedown', (e) => {
      if (e.target === diagramWrapper || e.target === svg) {
        isDragging = true;
        startX = e.clientX - currentTransform.x;
        startY = e.clientY - currentTransform.y;
        diagramWrapper.style.cursor = 'grabbing';
      }
    });

    diagramWrapper.addEventListener('mousemove', (e) => {
      if (isDragging) {
        currentTransform.x = e.clientX - startX;
        currentTransform.y = e.clientY - startY;
        updateTransform();
      }
    });

    diagramWrapper.addEventListener('mouseup', () => {
      isDragging = false;
      diagramWrapper.style.cursor = 'grab';
    });

    diagramWrapper.addEventListener('wheel', (e) => {
      e.preventDefault();
      const delta = e.deltaY > 0 ? 0.9 : 1.1;
      currentTransform.scale = Math.min(Math.max(0.5, currentTransform.scale * delta), 3);
      updateTransform();
    });

    // Entity selection
    function selectEntity(entity) {
      // Update highlight
      document.querySelectorAll('.entity').forEach(el => {
        el.classList.remove('highlighted');
      });
      document.querySelector(`[data-entity="${entity.id}"]`).classList.add('highlighted');

      // Update details panel
      document.getElementById('entity-name').textContent = entity.name.toUpperCase();
      
      const fieldList = document.getElementById('field-list');
      fieldList.innerHTML = '';
      
      entity.fields.forEach(field => {
        const li = document.createElement('li');
        li.classList.add('field-item');
        li.innerHTML = `
          <span class="field-name">${field.name}</span>
          <span>
            <span class="field-type">${field.type}</span>
            ${field.isPK ? '<span class="badge badge-pk">PK</span>' : ''}
            ${field.isFK ? '<span class="badge badge-fk">FK</span>' : ''}
          </span>
        `;
        fieldList.appendChild(li);
      });

      // Show relationships
      const relList = document.getElementById('relationship-list');
      relList.innerHTML = '';
      
      const entityRels = relationships.filter(r => r.from === entity.id || r.to === entity.id);
      entityRels.forEach(rel => {
        const li = document.createElement('li');
        li.classList.add('field-item');
        const isFrom = rel.from === entity.id;
        li.innerHTML = `
          <span>${isFrom ? 'References' : 'Referenced by'}</span>
          <span class="field-type">${isFrom ? rel.to : rel.from}</span>
        `;
        relList.appendChild(li);
      });

      // Show panel
      detailsPanel.classList.add('show');
      selectedEntity = entity;

      // Highlight related entities
      highlightRelatedEntities(entity.id);
    }

    // Highlight related entities
    function highlightRelatedEntities(entityId) {
      const relatedIds = new Set();
      relationships.forEach(rel => {
        if (rel.from === entityId) relatedIds.add(rel.to);
        if (rel.to === entityId) relatedIds.add(rel.from);
      });

      document.querySelectorAll('.entity').forEach(el => {
        const id = el.getAttribute('data-entity');
        if (id === entityId || relatedIds.has(id)) {
          el.classList.remove('dimmed');
        } else {
          el.classList.add('dimmed');
        }
      });

      document.querySelectorAll('.relationship').forEach(el => {
        const from = el.getAttribute('data-from');
        const to = el.getAttribute('data-to');
        if (from === entityId || to === entityId) {
          el.classList.add('highlighted');
          el.classList.remove('dimmed');
        } else {
          el.classList.add('dimmed');
          el.classList.remove('highlighted');
        }
      });
    }

    // Search functionality
    searchInput.addEventListener('input', (e) => {
      const query = e.target.value.toLowerCase();
      
      if (query.length === 0) {
        document.querySelectorAll('.entity').forEach(el => {
          el.classList.remove('dimmed');
          el.classList.remove('highlighted');
        });
        document.querySelectorAll('.relationship').forEach(el => {
          el.classList.remove('dimmed');
          el.classList.remove('highlighted');
        });
        return;
      }

      const matchingEntities = new Set();
      
      entities.forEach(entity => {
        if (entity.name.toLowerCase().includes(query) ||
            entity.fields.some(f => f.name.toLowerCase().includes(query))) {
          matchingEntities.add(entity.id);
        }
      });

      document.querySelectorAll('.entity').forEach(el => {
        const id = el.getAttribute('data-entity');
        if (matchingEntities.has(id)) {
          el.classList.add('highlighted');
          el.classList.remove('dimmed');
        } else {
          el.classList.add('dimmed');
          el.classList.remove('highlighted');
        }
      });
    });

    // Controls
    resetViewBtn.addEventListener('click', () => {
      currentTransform = { x: 0, y: 0, scale: 1 };
      updateTransform();
    });

    toggleRelBtn.addEventListener('click', () => {
      showRelationships = !showRelationships;
      relationshipsGroup.style.display = showRelationships ? 'block' : 'none';
      toggleRelBtn.textContent = showRelationships ? 'Hide Relationships' : 'Show Relationships';
    });

    zoomInBtn.addEventListener('click', () => {
      currentTransform.scale = Math.min(3, currentTransform.scale * 1.2);
      updateTransform();
    });

    zoomOutBtn.addEventListener('click', () => {
      currentTransform.scale = Math.max(0.5, currentTransform.scale * 0.8);
      updateTransform();
    });

    zoomFitBtn.addEventListener('click', () => {
      // Simple fit to view
      currentTransform = { x: 0, y: 0, scale: 0.8 };
      updateTransform();
    });

    // Close details panel
    document.getElementById('close-details-btn').addEventListener('click', () => {
      detailsPanel.classList.remove('show');
      document.querySelectorAll('.entity').forEach(el => {
        el.classList.remove('highlighted');
        el.classList.remove('dimmed');
      });
      document.querySelectorAll('.relationship').forEach(el => {
        el.classList.remove('highlighted');
        el.classList.remove('dimmed');
      });
    });

    // Tooltip
    function showTooltip(e, entity) {
      const rect = e.currentTarget.getBoundingClientRect();
      tooltip.textContent = `${entity.name} (${entity.fields.length} fields)`;
      tooltip.style.left = rect.left + rect.width / 2 + 'px';
      tooltip.style.top = rect.top - 10 + 'px';
      tooltip.classList.add('show');
    }

    function hideTooltip() {
      tooltip.classList.remove('show');
    }

    // Initial view
    currentTransform.scale = 0.8;
    updateTransform();
  });
</script>