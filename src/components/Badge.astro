---
export interface Props {
  type: 'beta' | 'concept' | 'deprecated' | 'future';
  class?: string;
  size?: 'small' | 'medium' | 'large';
}

const { type, class: className = '', size = 'medium' } = Astro.props;

const badges = {
  beta: {
    text: 'BETA',
    bgColor: 'bg-gradient-to-r from-orange-400 to-orange-500',
    textColor: 'text-orange-900',
    borderColor: 'border-orange-600',
    icon: '‚ö°',
  },
  concept: {
    text: 'CONCEPT',
    bgColor: 'bg-gray-200',
    textColor: 'text-gray-700',
    borderColor: 'border-gray-400',
    icon: 'üí°',
  },
  deprecated: {
    text: 'DEPRECATED',
    bgColor: 'bg-gradient-to-r from-gray-400 to-gray-500',
    textColor: 'text-gray-900',
    borderColor: 'border-gray-600',
    icon: '‚ö†Ô∏è',
  },
  future: {
    text: 'FUTURE',
    bgColor: 'bg-gray-400',
    textColor: 'text-gray-800',
    borderColor: 'border-gray-600',
    icon: 'üöÄ',
  },
};

const badge = badges[type];

if (!badge) {
  throw new Error(`Invalid badge type: ${type}. Must be one of: beta, concept, deprecated, future`);
}

const sizeClasses = {
  small: 'text-xs px-2 py-0.5',
  medium: 'text-sm px-3 py-1',
  large: 'text-base px-4 py-1.5',
};

const iconSizes = {
  small: 'text-xs',
  medium: 'text-sm',
  large: 'text-base',
};
---

<span
  class={`inline-flex items-center gap-1 font-bold rounded-full border ${badge.bgColor} ${badge.textColor} ${badge.borderColor} ${sizeClasses[size]} shadow-sm hover:shadow-md transition-shadow duration-200 ${className}`}
  title={`Maturity: ${badge.text}`}
>
  <span class={`${iconSizes[size]}`}>{badge.icon}</span>
  <span class="tracking-wider">{badge.text}</span>
</span>
