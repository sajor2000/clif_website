---
interface BreadcrumbItem {
  label: string;
  href: string;
}

interface Props {
  items?: BreadcrumbItem[];
  class?: string;
}

const { items = [], class: className = '' } = Astro.props;

// Auto-generate breadcrumbs from current URL if not provided
const currentPath = Astro.url.pathname;
const pathSegments = currentPath.split('/').filter((segment) => segment);

const defaultItems: BreadcrumbItem[] = [{ label: 'Home', href: '/' }];

// Generate breadcrumb items from URL segments
if (items.length === 0 && pathSegments.length > 0) {
  let currentHref = '';

  pathSegments.forEach((segment, index) => {
    currentHref += `/${segment}`;

    // Convert URL segment to readable label
    const label = segment
      .split('-')
      .map((word) => word.charAt(0).toUpperCase() + word.slice(1))
      .join(' ');

    // Special cases for known pages
    const specialCases: Record<string, string> = {
      mCIDE: 'mCIDE',
      'data-dictionary': 'Data Dictionary',
      'change-log': 'Change Log',
    };

    defaultItems.push({
      label: specialCases[segment] || label,
      href: currentHref,
    });
  });
}

const breadcrumbItems = items.length > 0 ? items : defaultItems;
const lastIndex = breadcrumbItems.length - 1;

// Prepare structured data
const structuredData = {
  '@context': 'https://schema.org',
  '@type': 'BreadcrumbList',
  itemListElement: breadcrumbItems.map((item, index) => ({
    '@type': 'ListItem',
    position: index + 1,
    name: item.label,
    item: new URL(item.href, Astro.site || 'https://clif-consortium.org').href,
  })),
};
---

<nav aria-label="Breadcrumb" class={`text-sm ${className}`}>
  <ol class="flex items-center space-x-2">
    {
      breadcrumbItems.map((item, index) => (
        <>
          <li class="flex items-center">
            {index === lastIndex ? (
              <span class="text-gray-500" aria-current="page">
                {item.label}
              </span>
            ) : (
              <a
                href={item.href}
                class="text-clif-burgundy hover:text-clif-burgundy-dark transition-colors"
              >
                {item.label}
              </a>
            )}
          </li>
          {index < lastIndex && (
            <li aria-hidden="true">
              <svg class="w-4 h-4 text-gray-400" fill="currentColor" viewBox="0 0 20 20">
                <path
                  fill-rule="evenodd"
                  d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z"
                  clip-rule="evenodd"
                />
              </svg>
            </li>
          )}
        </>
      ))
    }
  </ol>
</nav>

<script type="application/ld+json" set:html={JSON.stringify(structuredData)} />
