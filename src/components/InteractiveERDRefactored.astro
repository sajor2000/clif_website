---
/**
 * Interactive ERD Component - Refactored Version
 * A production-ready, accessible, and performant ERD visualization
 */
import type { TableDefinition } from '../types/ERDTypes';

export interface Props {
  tables: TableDefinition[];
  width?: number;
  height?: number;
  className?: string;
}

const { 
  tables, 
  width = 3000, 
  height = 2000,
  className = ''
} = Astro.props;

// Generate unique IDs for accessibility
const componentId = `erd-${Date.now()}`;
const searchId = `${componentId}-search`;
const diagramId = `${componentId}-diagram`;
const panelId = `${componentId}-panel`;
---

<div 
  class={`erd-component ${className}`}
  data-testid="interactive-erd"
  role="application"
  aria-label="Interactive Entity Relationship Diagram"
>
  <!-- Header -->
  <div class="erd-header">
    <h2 class="erd-title">Interactive Entity Relationship Diagram</h2>
    <p class="erd-description">
      Explore the relationships between all CLIF 2.0.0 tables. 
      Use keyboard navigation: Tab to navigate, Enter to select, Escape to close.
    </p>
  </div>

  <!-- Main Container -->
  <div class="erd-container" role="main">
    <!-- Controls -->
    <div class="erd-controls" role="toolbar" aria-label="Diagram controls">
      <div class="erd-search-wrapper">
        <label for={searchId} class="sr-only">Search tables and fields</label>
        <input
          type="search"
          id={searchId}
          class="erd-search"
          placeholder="Search tables or fields..."
          aria-describedby={`${searchId}-help`}
        />
        <span id={`${searchId}-help`} class="sr-only">
          Type to search for tables or fields. Press Enter to select first result.
        </span>
      </div>
      
      <div class="erd-button-group">
        <button 
          class="erd-button"
          data-action="reset-view"
          aria-label="Reset view to default position and zoom"
        >
          <svg width="16" height="16" viewBox="0 0 16 16" aria-hidden="true">
            <path d="M8 1a7 7 0 1 0 0 14A7 7 0 0 0 8 1zM3 8a5 5 0 0 1 8.5-3.5L10 6h4V2l-1.5 1.5A7 7 0 0 0 1 8h2z"/>
          </svg>
          Reset View
        </button>
        
        <button 
          class="erd-button"
          data-action="toggle-relationships"
          aria-label="Toggle relationship visibility"
          aria-pressed="true"
        >
          <svg width="16" height="16" viewBox="0 0 16 16" aria-hidden="true">
            <path d="M6 2a2 2 0 1 0 0 4 2 2 0 0 0 0-4zM10 10a2 2 0 1 0 0 4 2 2 0 0 0 0-4zM6 8l4 4"/>
          </svg>
          <span data-relationship-text>Hide Relationships</span>
        </button>
      </div>
    </div>

    <!-- Diagram Wrapper -->
    <div 
      class="erd-diagram-wrapper"
      role="img"
      aria-label="Entity relationship diagram"
      tabindex="0"
    >
      <svg 
        id={diagramId}
        class="erd-diagram"
        viewBox={`0 0 ${width} ${height}`}
        preserveAspectRatio="xMidYMid meet"
        aria-labelledby={`${diagramId}-title ${diagramId}-desc`}
      >
        <title id={`${diagramId}-title`}>Entity Relationship Diagram</title>
        <desc id={`${diagramId}-desc`}>
          Interactive diagram showing database tables and their relationships
        </desc>
        
        <!-- Definitions -->
        <defs>
          <marker 
            id={`${componentId}-arrow`}
            markerWidth="10" 
            markerHeight="10" 
            refX="9" 
            refY="3" 
            orient="auto" 
            markerUnits="strokeWidth"
          >
            <path d="M0,0 L0,6 L9,3 z" fill="#333" />
          </marker>
          
          <!-- Pattern for colorblind accessibility -->
          <pattern id={`${componentId}-beta-pattern`} x="0" y="0" width="4" height="4" patternUnits="userSpaceOnUse">
            <rect width="4" height="4" fill="#E67E22"/>
            <path d="M0,4 L4,0" stroke="white" stroke-width="0.5" opacity="0.3"/>
          </pattern>
        </defs>

        <!-- Content groups -->
        <g class="erd-relationships" aria-hidden="true"></g>
        <g class="erd-entities" role="group" aria-label="Database tables"></g>
      </svg>
      
      <!-- Loading indicator -->
      <div class="erd-loading" role="status" aria-live="polite">
        <span class="erd-loading-spinner"></span>
        <span class="erd-loading-text">Loading diagram...</span>
      </div>
    </div>

    <!-- Details Panel -->
    <aside 
      id={panelId}
      class="erd-details-panel"
      role="complementary"
      aria-label="Entity details"
      aria-hidden="true"
    >
      <div class="erd-panel-header">
        <h3 class="erd-panel-title">Entity Details</h3>
        <button 
          class="erd-panel-close"
          aria-label="Close details panel"
        >
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      
      <div class="erd-panel-content">
        <section class="erd-panel-section">
          <h4>Fields</h4>
          <ul class="erd-field-list" role="list"></ul>
        </section>
        
        <section class="erd-panel-section">
          <h4>Relationships</h4>
          <ul class="erd-relationship-list" role="list"></ul>
        </section>
      </div>
    </aside>

    <!-- Legend -->
    <div class="erd-legend" role="note" aria-label="Diagram legend">
      <h4 class="erd-legend-title">Maturity Levels</h4>
      <ul class="erd-legend-items" role="list">
        <li class="erd-legend-item">
          <span class="erd-legend-color erd-legend-beta" aria-hidden="true"></span>
          <span>Beta</span>
        </li>
        <li class="erd-legend-item">
          <span class="erd-legend-color erd-legend-new" aria-hidden="true"></span>
          <span>New</span>
        </li>
        <li class="erd-legend-item">
          <span class="erd-legend-color erd-legend-concept" aria-hidden="true"></span>
          <span>Concept</span>
        </li>
      </ul>
    </div>

    <!-- Zoom Controls -->
    <div class="erd-zoom-controls" role="toolbar" aria-label="Zoom controls">
      <button 
        class="erd-zoom-button"
        data-action="zoom-in"
        aria-label="Zoom in"
      >+</button>
      <button 
        class="erd-zoom-button"
        data-action="zoom-out"
        aria-label="Zoom out"
      >−</button>
      <button 
        class="erd-zoom-button"
        data-action="zoom-fit"
        aria-label="Fit to view"
      >⊡</button>
    </div>

    <!-- Screen reader announcements -->
    <div class="sr-only" role="status" aria-live="polite" aria-atomic="true"></div>
  </div>
</div>

<style>
  /* Base styles using CSS custom properties for theming */
  .erd-component {
    --erd-bg: #f5f5f5;
    --erd-entity-bg: white;
    --erd-entity-border: #ddd;
    --erd-text: #333;
    --erd-text-secondary: #666;
    --erd-highlight: #841839;
    --erd-relationship: #999;
    --erd-beta: #E67E22;
    --erd-new: #F39C12;
    --erd-concept: #95A5A6;
    --erd-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    --erd-radius: 8px;
    --erd-transition: 300ms ease;
  }

  /* Dark mode support */
  @media (prefers-color-scheme: dark) {
    .erd-component {
      --erd-bg: #1a1a1a;
      --erd-entity-bg: #2d2d2d;
      --erd-entity-border: #444;
      --erd-text: #e0e0e0;
      --erd-text-secondary: #999;
      --erd-relationship: #666;
    }
  }

  /* High contrast mode */
  @media (prefers-contrast: high) {
    .erd-component {
      --erd-bg: white;
      --erd-entity-bg: white;
      --erd-entity-border: black;
      --erd-text: black;
      --erd-text-secondary: black;
      --erd-highlight: black;
      --erd-relationship: black;
    }
  }

  /* Component structure */
  .erd-component {
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Helvetica Neue', Arial, sans-serif;
    color: var(--erd-text);
  }

  .erd-header {
    margin-bottom: 1.5rem;
  }

  .erd-title {
    font-size: 1.5rem;
    font-weight: 700;
    margin: 0 0 0.5rem;
    color: var(--erd-text);
  }

  .erd-description {
    margin: 0;
    color: var(--erd-text-secondary);
    font-size: 0.875rem;
  }

  .erd-container {
    position: relative;
    height: 800px;
    background-color: var(--erd-bg);
    border-radius: var(--erd-radius);
    overflow: hidden;
    box-shadow: var(--erd-shadow);
  }

  /* Controls */
  .erd-controls {
    position: absolute;
    top: 1.25rem;
    left: 1.25rem;
    z-index: 10;
    display: flex;
    gap: 1rem;
    align-items: center;
  }

  .erd-search-wrapper {
    position: relative;
  }

  .erd-search {
    padding: 0.5rem 1rem;
    border: 1px solid var(--erd-entity-border);
    border-radius: 4px;
    background: var(--erd-entity-bg);
    color: var(--erd-text);
    font-size: 0.875rem;
    width: 250px;
    transition: border-color var(--erd-transition);
  }

  .erd-search:focus {
    outline: 2px solid var(--erd-highlight);
    outline-offset: 2px;
    border-color: var(--erd-highlight);
  }

  .erd-button-group {
    display: flex;
    gap: 0.5rem;
    background: var(--erd-entity-bg);
    padding: 0.25rem;
    border-radius: 4px;
    box-shadow: var(--erd-shadow);
  }

  .erd-button {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem 1rem;
    background: var(--erd-highlight);
    color: white;
    border: none;
    border-radius: 4px;
    font-size: 0.875rem;
    cursor: pointer;
    transition: all var(--erd-transition);
  }

  .erd-button:hover {
    background: color-mix(in srgb, var(--erd-highlight) 85%, black);
    transform: translateY(-1px);
  }

  .erd-button:focus {
    outline: 2px solid var(--erd-highlight);
    outline-offset: 2px;
  }

  .erd-button:active {
    transform: translateY(0);
  }

  /* Diagram */
  .erd-diagram-wrapper {
    width: 100%;
    height: 100%;
    overflow: hidden;
    position: relative;
    cursor: grab;
  }

  .erd-diagram-wrapper:active {
    cursor: grabbing;
  }

  .erd-diagram-wrapper:focus {
    outline: 2px solid var(--erd-highlight);
    outline-offset: -2px;
  }

  .erd-diagram {
    width: 100%;
    height: 100%;
    transition: transform var(--erd-transition);
  }

  /* Loading state */
  .erd-loading {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    display: none;
    align-items: center;
    gap: 1rem;
  }

  .erd-loading.active {
    display: flex;
  }

  .erd-loading-spinner {
    width: 2rem;
    height: 2rem;
    border: 3px solid var(--erd-entity-border);
    border-top-color: var(--erd-highlight);
    border-radius: 50%;
    animation: spin 1s linear infinite;
  }

  @keyframes spin {
    to { transform: rotate(360deg); }
  }

  /* Details Panel */
  .erd-details-panel {
    position: absolute;
    right: 0;
    top: 0;
    width: 400px;
    height: 100%;
    background: var(--erd-entity-bg);
    box-shadow: -2px 0 10px rgba(0, 0, 0, 0.1);
    transform: translateX(100%);
    transition: transform var(--erd-transition);
    overflow-y: auto;
    z-index: 20;
  }

  .erd-details-panel[aria-hidden="false"] {
    transform: translateX(0);
  }

  .erd-panel-header {
    padding: 1.25rem;
    background: var(--erd-bg);
    border-bottom: 1px solid var(--erd-entity-border);
    display: flex;
    justify-content: space-between;
    align-items: center;
    position: sticky;
    top: 0;
    z-index: 1;
  }

  .erd-panel-title {
    margin: 0;
    font-size: 1.125rem;
    font-weight: 600;
  }

  .erd-panel-close {
    background: none;
    border: none;
    font-size: 1.5rem;
    cursor: pointer;
    color: var(--erd-text-secondary);
    width: 2rem;
    height: 2rem;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 4px;
    transition: all var(--erd-transition);
  }

  .erd-panel-close:hover {
    background: var(--erd-bg);
    color: var(--erd-text);
  }

  .erd-panel-close:focus {
    outline: 2px solid var(--erd-highlight);
    outline-offset: 2px;
  }

  .erd-panel-content {
    padding: 1.25rem;
  }

  .erd-panel-section {
    margin-bottom: 2rem;
  }

  .erd-panel-section h4 {
    margin: 0 0 1rem;
    font-size: 0.875rem;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.05em;
    color: var(--erd-text-secondary);
  }

  .erd-field-list,
  .erd-relationship-list {
    list-style: none;
    margin: 0;
    padding: 0;
  }

  /* Legend */
  .erd-legend {
    position: absolute;
    bottom: 1.25rem;
    left: 1.25rem;
    background: var(--erd-entity-bg);
    padding: 1rem;
    border-radius: var(--erd-radius);
    box-shadow: var(--erd-shadow);
  }

  .erd-legend-title {
    margin: 0 0 0.75rem;
    font-size: 0.875rem;
    font-weight: 600;
  }

  .erd-legend-items {
    list-style: none;
    margin: 0;
    padding: 0;
  }

  .erd-legend-item {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    margin-bottom: 0.5rem;
    font-size: 0.875rem;
  }

  .erd-legend-item:last-child {
    margin-bottom: 0;
  }

  .erd-legend-color {
    width: 1.25rem;
    height: 1.25rem;
    border-radius: 2px;
    border: 1px solid var(--erd-entity-border);
  }

  .erd-legend-beta {
    background: var(--erd-beta);
  }

  .erd-legend-new {
    background: var(--erd-new);
  }

  .erd-legend-concept {
    background: var(--erd-concept);
  }

  /* Zoom Controls */
  .erd-zoom-controls {
    position: absolute;
    bottom: 1.25rem;
    right: 1.25rem;
    background: var(--erd-entity-bg);
    border-radius: var(--erd-radius);
    box-shadow: var(--erd-shadow);
    display: flex;
    flex-direction: column;
    overflow: hidden;
  }

  .erd-zoom-button {
    background: none;
    border: none;
    width: 2.5rem;
    height: 2.5rem;
    font-size: 1.25rem;
    cursor: pointer;
    transition: background var(--erd-transition);
    color: var(--erd-text);
    border-bottom: 1px solid var(--erd-entity-border);
  }

  .erd-zoom-button:last-child {
    border-bottom: none;
  }

  .erd-zoom-button:hover {
    background: var(--erd-bg);
  }

  .erd-zoom-button:focus {
    outline: 2px solid var(--erd-highlight);
    outline-offset: -2px;
  }

  /* Utility classes */
  .sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border-width: 0;
  }

  /* Responsive */
  @media (max-width: 768px) {
    .erd-container {
      height: 600px;
    }

    .erd-controls {
      flex-direction: column;
      align-items: flex-start;
      max-width: calc(100% - 2.5rem);
    }

    .erd-search {
      width: 100%;
    }

    .erd-details-panel {
      width: 100%;
    }

    .erd-legend {
      bottom: auto;
      top: auto;
      left: 1.25rem;
      right: 1.25rem;
      margin-top: 1rem;
      position: relative;
    }
  }

  /* Print styles */
  @media print {
    .erd-controls,
    .erd-zoom-controls {
      display: none;
    }

    .erd-container {
      height: auto;
      box-shadow: none;
      background: white;
    }

    .erd-details-panel {
      position: static;
      transform: none;
      box-shadow: none;
      border: 1px solid black;
      margin-top: 1rem;
    }
  }
</style>

<script type="module">
  import { ERDState } from '../utils/ERDState.ts';
  import { 
    tablesToEntities, 
    extractRelationships,
    debounce,
    searchEntities,
    checkBrowserSupport,
    calculateFitTransform,
    clamp
  } from '../utils/ERDUtils.ts';
  import { DEFAULT_CONFIG, CSS_CLASSES, ARIA_LABELS, KEYBOARD_SHORTCUTS } from '../config/ERDConstants.ts';
  import { ERDRenderer } from '../utils/ERDRenderer.ts';
  
  // Get tables data from props
  const tablesData = JSON.parse(document.getElementById('erd-tables-data')?.textContent || '[]');
  
  // Initialize ERD
  class ERDComponent {
    constructor(container, tables) {
      this.container = container;
      this.tables = tables;
      this.state = new ERDState();
      this.renderer = null;
      this.cleanup = [];
      
      // Check browser support
      const support = checkBrowserSupport();
      if (!support.supported) {
        this.showError(`Browser not supported. Missing: ${support.missing.join(', ')}`);
        return;
      }
      
      this.init();
    }
    
    async init() {
      try {
        // Show loading
        this.setLoading(true);
        
        // Convert tables to entities
        const entities = tablesToEntities(this.tables);
        const relationships = extractRelationships(entities);
        
        // Initialize state
        this.state.setData(entities, relationships);
        
        // Initialize renderer
        const svg = this.container.querySelector('.erd-diagram');
        this.renderer = new ERDRenderer(svg, entities, relationships, this.state);
        
        // Set up event listeners
        this.setupEventListeners();
        
        // Initial render
        await this.renderer.render();
        
        // Hide loading
        this.setLoading(false);
        
        // Announce to screen readers
        this.announce('Entity relationship diagram loaded');
        
      } catch (error) {
        console.error('Failed to initialize ERD:', error);
        this.showError('Failed to load diagram');
      }
    }
    
    setupEventListeners() {
      // Search
      const searchInput = this.container.querySelector('.erd-search');
      const debouncedSearch = debounce((query) => {
        const matching = searchEntities(this.state.entities, query);
        this.state.updateHighlightedEntities(matching);
        this.renderer.updateHighlights();
      }, 300);
      
      searchInput?.addEventListener('input', (e) => {
        debouncedSearch(e.target.value);
      });
      
      // Keyboard navigation
      this.container.addEventListener('keydown', (e) => {
        this.handleKeyboard(e);
      });
      
      // Controls
      this.container.addEventListener('click', (e) => {
        const action = e.target.closest('[data-action]')?.dataset.action;
        if (action) this.handleAction(action);
      });
      
      // Pan and zoom
      this.setupPanZoom();
      
      // Store cleanup functions
      this.cleanup.push(
        () => searchInput?.removeEventListener('input', debouncedSearch),
        () => this.container.removeEventListener('keydown', this.handleKeyboard),
        () => this.container.removeEventListener('click', this.handleAction)
      );
    }
    
    setupPanZoom() {
      const wrapper = this.container.querySelector('.erd-diagram-wrapper');
      let isPanning = false;
      let startX, startY;
      
      wrapper?.addEventListener('mousedown', (e) => {
        if (e.target === wrapper || e.target.closest('.erd-diagram')) {
          isPanning = true;
          startX = e.clientX - this.state.getState().transform.x;
          startY = e.clientY - this.state.getState().transform.y;
          this.state.startPanning();
        }
      });
      
      wrapper?.addEventListener('mousemove', (e) => {
        if (isPanning) {
          const x = e.clientX - startX;
          const y = e.clientY - startY;
          this.state.setTransform({ x, y });
          this.renderer?.updateTransform();
        }
      });
      
      wrapper?.addEventListener('mouseup', () => {
        if (isPanning) {
          isPanning = false;
          this.state.stopPanning();
        }
      });
      
      wrapper?.addEventListener('wheel', (e) => {
        e.preventDefault();
        const delta = e.deltaY > 0 ? 0.9 : 1.1;
        const { scale } = this.state.getState().transform;
        const newScale = clamp(scale * delta, DEFAULT_CONFIG.dimensions.minScale, DEFAULT_CONFIG.dimensions.maxScale);
        this.state.setTransform({ scale: newScale });
        this.renderer?.updateTransform();
      });
    }
    
    handleKeyboard(e) {
      switch (e.key) {
        case KEYBOARD_SHORTCUTS.ESCAPE:
          this.state.handleKeyboardNavigation('Escape');
          break;
        case KEYBOARD_SHORTCUTS.SEARCH:
          if (e.target.tagName !== 'INPUT') {
            e.preventDefault();
            this.container.querySelector('.erd-search')?.focus();
          }
          break;
        case KEYBOARD_SHORTCUTS.ZOOM_IN:
          if (e.ctrlKey || e.metaKey) {
            e.preventDefault();
            this.handleAction('zoom-in');
          }
          break;
        case KEYBOARD_SHORTCUTS.ZOOM_OUT:
          if (e.ctrlKey || e.metaKey) {
            e.preventDefault();
            this.handleAction('zoom-out');
          }
          break;
      }
    }
    
    handleAction(action) {
      switch (action) {
        case 'reset-view':
          this.state.resetView();
          this.renderer?.updateTransform();
          this.announce('View reset to default');
          break;
        case 'toggle-relationships':
          this.state.toggleRelationships();
          this.renderer?.toggleRelationships();
          const show = this.state.getState().showRelationships;
          this.announce(`Relationships ${show ? 'shown' : 'hidden'}`);
          break;
        case 'zoom-in':
          this.zoom(1.2);
          break;
        case 'zoom-out':
          this.zoom(0.8);
          break;
        case 'zoom-fit':
          this.fitToView();
          break;
      }
    }
    
    zoom(factor) {
      const { scale } = this.state.getState().transform;
      const newScale = clamp(scale * factor, DEFAULT_CONFIG.dimensions.minScale, DEFAULT_CONFIG.dimensions.maxScale);
      this.state.setTransform({ scale: newScale });
      this.renderer?.updateTransform();
    }
    
    fitToView() {
      const wrapper = this.container.querySelector('.erd-diagram-wrapper');
      const transform = calculateFitTransform(
        this.state.entities,
        wrapper.clientWidth,
        wrapper.clientHeight
      );
      this.state.setTransform(transform);
      this.renderer?.updateTransform();
      this.announce('View fitted to content');
    }
    
    setLoading(loading) {
      const loader = this.container.querySelector('.erd-loading');
      if (loader) {
        loader.classList.toggle('active', loading);
      }
    }
    
    showError(message) {
      this.announce(`Error: ${message}`);
      // Could show visual error state here
    }
    
    announce(message) {
      const announcer = this.container.querySelector('[role="status"]');
      if (announcer) {
        announcer.textContent = message;
      }
    }
    
    destroy() {
      this.cleanup.forEach(fn => fn());
      this.renderer?.destroy();
      this.state.destroy();
    }
  }
  
  // Initialize on DOM ready
  document.addEventListener('DOMContentLoaded', () => {
    const container = document.querySelector('.erd-component');
    if (container) {
      const erd = new ERDComponent(container, tablesData);
      
      // Clean up on page unload
      window.addEventListener('beforeunload', () => erd.destroy());
    }
  });
</script>

<!-- Pass tables data to client script -->
<script type="application/json" id="erd-tables-data" set:html={JSON.stringify(tables)}></script>