---
interface Props {
  value: string;
  label: string;
  prefix?: string;
  suffix?: string;
  icon?: string;
}

const { value, label, prefix = '', suffix = '', icon } = Astro.props;
---

<div
  class="text-center p-6 glass rounded-xl shadow-lg hover:shadow-xl transition-all duration-300 border-t-4 border-clif-burgundy glow-hover animate-float"
>
  {icon && <div class="mb-4 text-clif-burgundy" set:html={icon} />}
  <div class="text-4xl font-bold text-clif-burgundy mb-2" data-counter data-target={value}>
    {prefix}<span class="counter-value">0</span>{suffix}
  </div>
  <p class="text-gray-600 font-medium">{label}</p>
</div>

<script>
  // Animate counters when they come into view

  const animateCounter = (element: Element) => {
    const target = parseInt(element.getAttribute('data-target') || '0');
    const valueElement = element.querySelector('.counter-value');
    if (!valueElement) return;

    const duration = 2000; // 2 seconds
    const startTime = performance.now();
    let animationId: number;

    const updateCounter = (currentTime: number) => {
      const elapsed = currentTime - startTime;
      const progress = Math.min(elapsed / duration, 1);
      
      // Use easing function for smoother animation
      const easeOutQuart = 1 - Math.pow(1 - progress, 4);
      const current = Math.floor(target * easeOutQuart);
      
      valueElement.textContent = current.toLocaleString();
      
      if (progress < 1) {
        animationId = requestAnimationFrame(updateCounter);
      } else {
        valueElement.textContent = target.toLocaleString();
        // Reset will-change after animation
        element.style.willChange = 'auto';
      }
    };

    // Set will-change for animation
    element.style.willChange = 'contents';
    animationId = requestAnimationFrame(updateCounter);
    
    // Store animation ID for cleanup
    (element as HTMLElement & { _animationId?: number })._animationId = animationId;
  };

  // Listen for centralized counter visibility events
  const handleCounterVisible = (event: CustomEvent) => {
    const element = event.detail.element;
    if (element && element.hasAttribute('data-counter')) {
      animateCounter(element);
    }
  };

  // Cleanup function for animations
  const cleanup = () => {
    const counters = document.querySelectorAll('[data-counter]');
    counters.forEach((counter) => {
      const counterEl = counter as HTMLElement & { _animationId?: number };
      if (counterEl._animationId) {
        cancelAnimationFrame(counterEl._animationId);
      }
    });
  };

  // Listen for centralized events
  window.addEventListener('counterVisible', handleCounterVisible);
  
  // Cleanup on page unload
  window.addEventListener('beforeunload', () => {
    cleanup();
    window.removeEventListener('counterVisible', handleCounterVisible);
  });
</script>
