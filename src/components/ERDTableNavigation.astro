---
interface TableItem {
  id: string;
  name: string;
  maturity: 'beta' | 'concept';
}

interface Props {
  tables: TableItem[];
}

const { tables } = Astro.props;

// Group tables by maturity
const betaTables = tables.filter(t => t.maturity === 'beta');
const conceptTables = tables.filter(t => t.maturity === 'concept');
---

<nav class="sticky top-4 bg-white rounded-lg shadow-lg border border-gray-200 p-6 max-h-[calc(100vh-2rem)] overflow-y-auto">
  <h3 class="text-xl font-bold mb-6 text-gray-900 border-b border-gray-100 pb-3">
    Data Tables
  </h3>

  <!-- Search Box -->
  <div class="mb-6">
    <div class="relative">
      <input
        type="search"
        id="table-search"
        placeholder="Search tables..."
        class="w-full px-4 py-2 pl-10 text-sm border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-clif-burgundy focus:border-transparent"
      />
      <svg class="absolute left-3 top-2.5 h-4 w-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
      </svg>
    </div>
  </div>

  <div class="space-y-6">
    <!-- Beta Tables Section -->
    <div class="beta-section">
      <div class="flex items-center justify-between mb-3">
        <h4 class="text-sm font-bold text-orange-700 uppercase tracking-wider flex items-center">
          <span class="inline-block w-3 h-3 bg-orange-500 rounded-full mr-2"></span>
          Beta Tables
        </h4>
        <span class="text-xs bg-orange-100 text-orange-800 px-2 py-1 rounded-full font-medium">
          {betaTables.length}
        </span>
      </div>
      <div class="grid grid-cols-1 gap-1">
        {betaTables.map((table) => (
          <a
            href={`#${table.id}`}
            class="table-nav-item beta-item group block px-3 py-2 text-sm text-gray-700 hover:bg-orange-50 hover:text-orange-800 rounded-md transition-colors border-l-3 border-transparent hover:border-orange-400"
            data-table-link={table.id}
            data-table-name={table.name.toLowerCase()}
          >
            <div class="flex items-center justify-between">
              <span class="font-medium">{table.name}</span>
              <span class="text-xs opacity-60 group-hover:opacity-100">β</span>
            </div>
          </a>
        ))}
      </div>
    </div>

    <!-- Concept Tables Section -->
    <div class="concept-section">
      <div class="flex items-center justify-between mb-3">
        <h4 class="text-sm font-bold text-purple-700 uppercase tracking-wider flex items-center">
          <span class="inline-block w-3 h-3 bg-purple-500 rounded-full mr-2"></span>
          Concept Tables
        </h4>
        <span class="text-xs bg-purple-100 text-purple-800 px-2 py-1 rounded-full font-medium">
          {conceptTables.length}
        </span>
      </div>
      <div class="grid grid-cols-1 gap-1">
        {conceptTables.map((table) => (
          <a
            href={`#${table.id}`}
            class="table-nav-item concept-item group block px-3 py-2 text-sm text-gray-700 hover:bg-purple-50 hover:text-purple-800 rounded-md transition-colors border-l-3 border-transparent hover:border-purple-400"
            data-table-link={table.id}
            data-table-name={table.name.toLowerCase()}
          >
            <div class="flex items-center justify-between">
              <span class="font-medium">{table.name}</span>
              <span class="text-xs opacity-60 group-hover:opacity-100">α</span>
            </div>
          </a>
        ))}
      </div>
    </div>
  </div>

  <!-- Quick Stats -->
  <div class="mt-6 pt-4 border-t border-gray-100">
    <div class="text-xs text-gray-500 space-y-1">
      <div class="flex justify-between">
        <span>Total Tables:</span>
        <span class="font-medium">{tables.length}</span>
      </div>
      <div class="flex justify-between">
        <span>Production Ready:</span>
        <span class="font-medium text-orange-600">{betaTables.length}</span>
      </div>
      <div class="flex justify-between">
        <span>In Development:</span>
        <span class="font-medium text-purple-600">{conceptTables.length}</span>
      </div>
    </div>
  </div>
</nav>

<script>
  // Enhanced search and navigation functionality
  document.addEventListener('DOMContentLoaded', () => {
    const searchInput = document.getElementById('table-search') as HTMLInputElement;
    const tableLinks = document.querySelectorAll('[data-table-link]') as NodeListOf<HTMLAnchorElement>;
    const sections = document.querySelectorAll('section[id]') as NodeListOf<HTMLElement>;

    // Search functionality
    if (searchInput) {
      searchInput.addEventListener('input', (e) => {
        const searchTerm = (e.target as HTMLInputElement).value.toLowerCase().trim();

        tableLinks.forEach((link) => {
          const tableName = link.getAttribute('data-table-name') || '';
          const tableText = link.textContent?.toLowerCase() || '';

          if (searchTerm === '' || tableName.includes(searchTerm) || tableText.includes(searchTerm)) {
            link.style.display = 'block';
          } else {
            link.style.display = 'none';
          }
        });

        // Show/hide sections based on visible items
        const betaSection = document.querySelector('.beta-section') as HTMLElement;
        const conceptSection = document.querySelector('.concept-section') as HTMLElement;

        if (betaSection) {
          const visibleBetaItems = betaSection.querySelectorAll('.beta-item[style=""]').length;
          const allBetaItems = betaSection.querySelectorAll('.beta-item[style="display: block;"], .beta-item:not([style])').length;
          betaSection.style.display = (visibleBetaItems > 0 || allBetaItems > 0) && searchTerm === '' ? 'block' :
                                      (visibleBetaItems > 0) ? 'block' : 'none';
        }

        if (conceptSection) {
          const visibleConceptItems = conceptSection.querySelectorAll('.concept-item[style=""]').length;
          const allConceptItems = conceptSection.querySelectorAll('.concept-item[style="display: block;"], .concept-item:not([style])').length;
          conceptSection.style.display = (visibleConceptItems > 0 || allConceptItems > 0) && searchTerm === '' ? 'block' :
                                          (visibleConceptItems > 0) ? 'block' : 'none';
        }
      });
    }

    // Smooth scroll on click
    tableLinks.forEach((link) => {
      link.addEventListener('click', (e) => {
        e.preventDefault();
        const targetId = link.getAttribute('href');
        if (targetId) {
          const target = document.querySelector(targetId);
          if (target) {
            target.scrollIntoView({
              behavior: 'smooth',
              block: 'start',
              inline: 'nearest'
            });

            // Update URL without triggering navigation
            history.pushState(null, '', targetId);
          }
        }
      });
    });

    // Highlight active section on scroll
    const observerOptions = {
      root: null,
      rootMargin: '-10% 0px -70% 0px',
      threshold: 0.1,
    };

    const observer = new IntersectionObserver((entries) => {
      entries.forEach((entry) => {
        const id = entry.target.getAttribute('id');
        const link = document.querySelector(`[data-table-link="${id}"]`);

        if (entry.isIntersecting) {
          // Remove active class from all links
          tableLinks.forEach((l) => {
            l.classList.remove('active-beta', 'active-concept');
          });

          // Add appropriate active class
          if (link) {
            if (link.classList.contains('beta-item')) {
              link.classList.add('active-beta');
            } else if (link.classList.contains('concept-item')) {
              link.classList.add('active-concept');
            }
          }
        }
      });
    }, observerOptions);

    // Observe all sections
    sections.forEach((section) => {
      observer.observe(section);
    });

    // Handle direct URL navigation (hash in URL on page load)
    if (window.location.hash) {
      setTimeout(() => {
        const target = document.querySelector(window.location.hash);
        if (target) {
          target.scrollIntoView({ behavior: 'smooth', block: 'start' });
        }
      }, 100);
    }
  });
</script>

<style>
  /* Active state styles */
  .table-nav-item.active-beta {
    @apply bg-orange-100 text-orange-900 border-orange-500 font-semibold;
  }

  .table-nav-item.active-concept {
    @apply bg-purple-100 text-purple-900 border-purple-500 font-semibold;
  }

  /* Hover enhancements */
  .table-nav-item:hover {
    transform: translateX(2px);
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
  }

  /* Search input enhancements */
  #table-search:focus {
    box-shadow: 0 0 0 3px rgba(139, 28, 59, 0.1);
  }

  /* Section transitions */
  .beta-section, .concept-section {
    transition: opacity 0.2s ease-in-out;
  }

  /* Scrollbar styling for navigation */
  nav::-webkit-scrollbar {
    width: 6px;
  }

  nav::-webkit-scrollbar-track {
    background: #f1f5f9;
    border-radius: 3px;
  }

  nav::-webkit-scrollbar-thumb {
    background: #cbd5e1;
    border-radius: 3px;
  }

  nav::-webkit-scrollbar-thumb:hover {
    background: #94a3b8;
  }

  /* Enhanced border styles */
  .border-l-3 {
    border-left-width: 3px;
  }
</style>