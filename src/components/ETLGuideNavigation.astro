---
interface NavigationSection {
  id: string;
  title: string;
  type: 'section' | 'table';
  category?: 'general' | 'tables' | 'tools';
}

interface Props {
  sections: NavigationSection[];
}

const { sections } = Astro.props;

// Group sections by category
const generalSections = sections.filter(s => s.category === 'general');
const tableSections = sections.filter(s => s.category === 'tables');
const toolSections = sections.filter(s => s.category === 'tools');
---

<nav class="sticky top-4 bg-white rounded-lg shadow-lg border border-gray-200 p-6 max-h-[calc(100vh-2rem)] overflow-y-auto">

  <!-- Search Box -->
  <div class="mb-6">
    <div class="relative">
      <input
        type="search"
        id="etl-search"
        placeholder="Search sections..."
        class="w-full px-4 py-2 pl-10 text-sm border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-clif-burgundy focus:border-transparent"
      />
      <svg class="absolute left-3 top-2.5 h-4 w-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
      </svg>
    </div>
  </div>

  <div class="space-y-6">
    <!-- General Guidelines Section -->
    {generalSections.length > 0 && (
      <div class="general-section">
        <div class="flex items-center justify-between mb-3">
          <h4 class="text-sm font-bold text-clif-burgundy uppercase tracking-wider flex items-center">
            <span class="inline-block w-3 h-3 bg-clif-burgundy rounded-full mr-2"></span>
            General Guidelines
          </h4>
          <span class="text-xs bg-clif-burgundy/10 text-clif-burgundy px-2 py-1 rounded-full font-medium">
            {generalSections.length}
          </span>
        </div>
        <div class="grid grid-cols-1 gap-1">
          {generalSections.map((section) => (
            <a
              href={`#${section.id}`}
              class="nav-item general-item group block px-3 py-2 text-sm text-gray-700 hover:bg-clif-burgundy/5 hover:text-clif-burgundy rounded-md transition-colors border-l-3 border-transparent hover:border-clif-burgundy"
              data-nav-link={section.id}
              data-nav-name={section.title.toLowerCase()}
            >
              <div class="flex items-center justify-between">
                <span class="font-medium">{section.title}</span>
                <svg class="w-4 h-4 opacity-60 group-hover:opacity-100" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                </svg>
              </div>
            </a>
          ))}
        </div>
      </div>
    )}

    <!-- Table Specific Guidelines Section -->
    {tableSections.length > 0 && (
      <div class="tables-section">
        <div class="flex items-center justify-between mb-3">
          <h4 class="text-sm font-bold text-green-700 uppercase tracking-wider flex items-center">
            <span class="inline-block w-3 h-3 bg-green-500 rounded-full mr-2"></span>
            Table Specific Guidelines
          </h4>
          <span class="text-xs bg-green-100 text-green-800 px-2 py-1 rounded-full font-medium">
            {tableSections.length}
          </span>
        </div>
        <div class="grid grid-cols-1 gap-1">
          {tableSections.map((section) => (
            <a
              href={`#${section.id}`}
              class="nav-item tables-item group block px-3 py-2 text-sm text-gray-700 hover:bg-green-50 hover:text-green-800 rounded-md transition-colors border-l-3 border-transparent hover:border-green-400"
              data-nav-link={section.id}
              data-nav-name={section.title.toLowerCase()}
            >
              <div class="flex items-center justify-between">
                <span class="font-medium {section.type === 'table' ? 'font-mono text-xs' : ''}">{section.title}</span>
                {section.type === 'section' && (
                  <svg class="w-4 h-4 opacity-60 group-hover:opacity-100" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                  </svg>
                )}
              </div>
            </a>
          ))}
        </div>
      </div>
    )}

    <!-- Tools & Resources Section -->
    {toolSections.length > 0 && (
      <div class="tools-section">
        <div class="flex items-center justify-between mb-3">
          <h4 class="text-sm font-bold text-blue-700 uppercase tracking-wider flex items-center">
            <span class="inline-block w-3 h-3 bg-blue-500 rounded-full mr-2"></span>
            Tools & Resources
          </h4>
          <span class="text-xs bg-blue-100 text-blue-800 px-2 py-1 rounded-full font-medium">
            {toolSections.length}
          </span>
        </div>
        <div class="grid grid-cols-1 gap-1">
          {toolSections.map((section) => (
            <a
              href={`#${section.id}`}
              class="nav-item tools-item group block px-3 py-2 text-sm text-gray-700 hover:bg-blue-50 hover:text-blue-800 rounded-md transition-colors border-l-3 border-transparent hover:border-blue-400"
              data-nav-link={section.id}
              data-nav-name={section.title.toLowerCase()}
            >
              <div class="flex items-center justify-between">
                <span class="font-medium">{section.title}</span>
                <svg class="w-4 h-4 opacity-60 group-hover:opacity-100" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z" />
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                </svg>
              </div>
            </a>
          ))}
        </div>
      </div>
    )}
  </div>

  <!-- Quick Stats -->
  <div class="mt-6 pt-4 border-t border-gray-100">
    <div class="text-xs text-gray-500 space-y-1">
      <div class="flex justify-between">
        <span>Total Sections:</span>
        <span class="font-medium">{sections.length}</span>
      </div>
      <div class="flex justify-between">
        <span>General Guidelines:</span>
        <span class="font-medium text-clif-burgundy">{generalSections.length}</span>
      </div>
      <div class="flex justify-between">
        <span>Table Guidelines:</span>
        <span class="font-medium text-green-600">{tableSections.length}</span>
      </div>
      <div class="flex justify-between">
        <span>Tools & Resources:</span>
        <span class="font-medium text-blue-600">{toolSections.length}</span>
      </div>
    </div>
  </div>

  <!-- Progress Indicator -->
  <div class="mt-4 pt-4 border-t border-gray-100">
    <div class="text-xs text-gray-500 mb-2">Reading Progress</div>
    <div class="w-full bg-gray-200 rounded-full h-2">
      <div id="progress-bar" class="bg-clif-burgundy h-2 rounded-full transition-all duration-300" style="width: 0%"></div>
    </div>
  </div>
</nav>

<script>
  // Enhanced search and navigation functionality
  document.addEventListener('DOMContentLoaded', () => {
    const searchInput = document.getElementById('etl-search') as HTMLInputElement;
    const navLinks = document.querySelectorAll('[data-nav-link]') as NodeListOf<HTMLAnchorElement>;
    const sections = document.querySelectorAll('section[id], div[id]') as NodeListOf<HTMLElement>;
    const progressBar = document.getElementById('progress-bar') as HTMLElement;

    // Search functionality
    if (searchInput) {
      searchInput.addEventListener('input', (e) => {
        const searchTerm = (e.target as HTMLInputElement).value.toLowerCase().trim();

        navLinks.forEach((link) => {
          const navName = link.getAttribute('data-nav-name') || '';
          const navText = link.textContent?.toLowerCase() || '';

          if (searchTerm === '' || navName.includes(searchTerm) || navText.includes(searchTerm)) {
            link.style.display = 'block';
          } else {
            link.style.display = 'none';
          }
        });

        // Show/hide sections based on visible items
        const sectionGroups = [
          { selector: '.general-section', items: '.general-item' },
          { selector: '.tables-section', items: '.tables-item' },
          { selector: '.tools-section', items: '.tools-item' }
        ];

        sectionGroups.forEach(({ selector, items }) => {
          const section = document.querySelector(selector) as HTMLElement;
          if (section) {
            const visibleItems = section.querySelectorAll(`${items}:not([style*="display: none"])`).length;
            section.style.display = visibleItems > 0 || searchTerm === '' ? 'block' : 'none';
          }
        });
      });
    }

    // Smooth scroll on click
    navLinks.forEach((link) => {
      link.addEventListener('click', (e) => {
        e.preventDefault();
        const targetId = link.getAttribute('href');
        if (targetId) {
          const target = document.querySelector(targetId);
          if (target) {
            target.scrollIntoView({
              behavior: 'smooth',
              block: 'start',
              inline: 'nearest'
            });

            // Update URL without triggering navigation
            history.pushState(null, '', targetId);
          }
        }
      });
    });

    // Highlight active section on scroll and update progress
    const observerOptions = {
      root: null,
      rootMargin: '-10% 0px -70% 0px',
      threshold: 0.1,
    };

    let activeSectionIndex = 0;

    const observer = new IntersectionObserver((entries) => {
      entries.forEach((entry) => {
        const id = entry.target.getAttribute('id');
        const link = document.querySelector(`[data-nav-link="${id}"]`);

        if (entry.isIntersecting) {
          // Remove active class from all links
          navLinks.forEach((l) => {
            l.classList.remove('active-general', 'active-tables', 'active-tools');
          });

          // Add appropriate active class
          if (link) {
            if (link.classList.contains('general-item')) {
              link.classList.add('active-general');
            } else if (link.classList.contains('tables-item')) {
              link.classList.add('active-tables');
            } else if (link.classList.contains('tools-item')) {
              link.classList.add('active-tools');
            }

            // Update progress bar
            const allSections = Array.from(sections);
            const currentIndex = allSections.findIndex(s => s.getAttribute('id') === id);
            if (currentIndex !== -1) {
              activeSectionIndex = currentIndex;
              const progress = ((currentIndex + 1) / allSections.length) * 100;
              if (progressBar) {
                progressBar.style.width = `${Math.min(progress, 100)}%`;
              }
            }
          }
        }
      });
    }, observerOptions);

    // Observe all sections
    sections.forEach((section) => {
      observer.observe(section);
    });

    // Handle direct URL navigation (hash in URL on page load)
    if (window.location.hash) {
      setTimeout(() => {
        const target = document.querySelector(window.location.hash);
        if (target) {
          target.scrollIntoView({ behavior: 'smooth', block: 'start' });
        }
      }, 100);
    }

    // Update progress on scroll
    window.addEventListener('scroll', () => {
      const scrollTop = window.pageYOffset;
      const docHeight = document.documentElement.scrollHeight - window.innerHeight;
      const scrollPercent = (scrollTop / docHeight) * 100;

      if (progressBar) {
        progressBar.style.width = `${Math.min(scrollPercent, 100)}%`;
      }
    });
  });
</script>

<style>
  /* Active state styles */
  .nav-item.active-general {
    @apply bg-clif-burgundy/10 text-clif-burgundy border-clif-burgundy font-semibold;
  }

  .nav-item.active-tables {
    @apply bg-green-100 text-green-900 border-green-500 font-semibold;
  }

  .nav-item.active-tools {
    @apply bg-blue-100 text-blue-900 border-blue-500 font-semibold;
  }

  /* Hover enhancements */
  .nav-item:hover {
    transform: translateX(2px);
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
  }

  /* Search input enhancements */
  #etl-search:focus {
    box-shadow: 0 0 0 3px rgba(139, 28, 59, 0.1);
  }

  /* Section transitions */
  .general-section, .tables-section, .tools-section {
    transition: opacity 0.2s ease-in-out;
  }

  /* Scrollbar styling for navigation */
  nav::-webkit-scrollbar {
    width: 6px;
  }

  nav::-webkit-scrollbar-track {
    background: #f1f5f9;
    border-radius: 3px;
  }

  nav::-webkit-scrollbar-thumb {
    background: #cbd5e1;
    border-radius: 3px;
  }

  nav::-webkit-scrollbar-thumb:hover {
    background: #94a3b8;
  }

  /* Enhanced border styles */
  .border-l-3 {
    border-left-width: 3px;
  }

  /* Progress bar styling */
  #progress-bar {
    transition: width 0.3s ease;
  }
</style>