---
// Optimized Interactive ERD Component for CLIF 2.0.0
import type { ERDEntity, ERDRelationship } from '../lib/erd/ERDTypes';

export interface Props {
  tables?: any[];
  height?: string;
  className?: string;
  enableKeyboardNavigation?: boolean;
  enableSearch?: boolean;
}

const { 
  tables = [], 
  height = '800px',
  className = '',
  enableKeyboardNavigation = true,
  enableSearch = true
} = Astro.props;

// Transform CLIF table data to ERD entities
function transformTableToEntity(table: any, maturity: 'beta' | 'concept' | 'future'): ERDEntity {
  // Validate required fields
  if (!table || !table.id) {
    return null;
  }
  
  return {
    id: table.id,
    name: table.name || table.id,
    maturity,
    position: getEntityPosition(table.id),
    fields: Array.isArray(table.fields) ? table.fields : [], // Ensure fields is an array
    description: table.description || '',
    notes: Array.isArray(table.notes) ? table.notes : []
  };
}

// Get entity position based on ID (matching static ERD layout)
function getEntityPosition(entityId: string): { x: number; y: number } {
  const positions: Record<string, { x: number; y: number }> = {
    // Row 1 - Core tables
    'patient': { x: 50, y: 50 },
    'hospitalization': { x: 250, y: 50 },
    'adt': { x: 450, y: 50 },
    'vitals': { x: 650, y: 50 },
    'medication_admin_continuous': { x: 850, y: 50 },
    'labs': { x: 1050, y: 50 },
    
    // Row 2 - Assessment tables  
    'patient_assessments': { x: 50, y: 180 },
    'position': { x: 250, y: 180 },
    'respiratory_support': { x: 450, y: 180 },
    
    // Row 3 - Clinical tables
    'code_status': { x: 50, y: 310 },
    'crrt_therapy': { x: 250, y: 310 },
    'ecmo_mcs': { x: 450, y: 310 },
    'hospital_diagnosis': { x: 650, y: 310 },
    'intake_output': { x: 850, y: 310 },
    'invasive_hemodynamics': { x: 1050, y: 310 },
    
    // Row 4 - Medication/Order tables
    'key_icu_orders': { x: 50, y: 440 },
    'medication_admin_intermittent': { x: 250, y: 440 },
    'medication_orders': { x: 450, y: 440 },
    'microbiology_culture': { x: 650, y: 440 },
    'microbiology_non_culture': { x: 850, y: 440 },
    'procedures': { x: 1050, y: 440 },
    
    // Row 5 - Support tables
    'provider': { x: 50, y: 570 },
    'sensitivity': { x: 250, y: 570 },
    'therapy_details': { x: 450, y: 570 },
    'transfusion': { x: 650, y: 570 },
    
    // Row 6 - Future tables
    'clinical_decision_support': { x: 50, y: 700 }
  };
  
  return positions[entityId] || { x: 50, y: 50 };
}

// Determine maturity level from table metadata
function getMaturityLevel(table: any): 'beta' | 'concept' | 'future' {
  const betaTables = ['patient', 'hospitalization', 'adt', 'vitals', 'labs', 'medication_admin_continuous', 'patient_assessments', 'position', 'respiratory_support'];
  const futureTables = ['clinical_decision_support'];
  
  if (betaTables.includes(table.id)) return 'beta';
  if (futureTables.includes(table.id)) return 'future';
  return 'concept';
}

// Create entities from table data
const entities: ERDEntity[] = tables && tables.length > 0 
  ? tables.map(table => transformTableToEntity(table, getMaturityLevel(table)))
      .filter(entity => entity !== null) // Remove invalid entities
  : [];

// Log for debugging
console.log('Tables provided:', tables?.length || 0);
console.log('Entities created:', entities.length);

// Create relationships (all tables connect to hospitalization)
const relationships: ERDRelationship[] = entities
  .filter(entity => entity.id !== 'patient' && entity.id !== 'hospitalization')
  .map(entity => ({
    from: 'hospitalization',
    to: entity.id,
    field: 'hospitalization_id',
    type: 'one-to-many' as const
  }));

// Add patient -> hospitalization relationship
if (entities.find(e => e.id === 'patient') && entities.find(e => e.id === 'hospitalization')) {
  relationships.unshift({
    from: 'patient',
    to: 'hospitalization', 
    field: 'patient_id',
    type: 'one-to-many'
  });
}

// Generate unique container ID
const containerId = `erd-container-${Math.random().toString(36).substr(2, 9)}`;
---

<div 
  class={`erd-wrapper ${className}`}
  style={`height: ${height}; position: relative; width: 100%;`}
>
  <!-- ERD Container -->
  <div 
    id={containerId}
    class="erd-astro-container"
    style="width: 100%; height: 100%; min-height: 600px;"
    role="application"
    aria-label="Interactive Entity Relationship Diagram for CLIF 2.0.0"
    data-erd-auto-init="true"
    data-enable-analytics="false"
    data-enable-keyboard={enableKeyboardNavigation.toString()}
    data-enable-search={enableSearch.toString()}
    data-erd-entities={JSON.stringify(entities)}
    data-erd-relationships={JSON.stringify(relationships)}
    data-container-id={containerId}
  >
    <!-- Loading state -->
    <div class="erd-loading-state" style="
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      text-align: center;
      font-size: 18px;
      color: #666;
    ">
      <div class="erd-spinner" style="
        border: 3px solid #f3f3f3;
        border-top: 3px solid #841839;
        border-radius: 50%;
        width: 40px;
        height: 40px;
        animation: spin 1s linear infinite;
        margin: 0 auto 16px;
      "></div>
      Loading Interactive ERD...
    </div>
  </div>

  <!-- Instructions for keyboard users -->
  {enableKeyboardNavigation && (
    <div class="sr-only" id="erd-instructions">
      <h2>Keyboard Navigation Instructions</h2>
      <ul>
        <li>Use Tab to navigate between entities</li>
        <li>Press Enter or Space to select an entity</li>
        <li>Use arrow keys to navigate the diagram</li>
        <li>Press Escape to close details panel</li>
        <li>Press Ctrl+F (or Cmd+F) to focus search</li>
        <li>Use + and - keys to zoom in and out</li>
        <li>Press 0 to fit diagram to view</li>
      </ul>
    </div>
  )}
</div>

<style>
  .erd-wrapper {
    position: relative;
    background: #f8fafc;
    border-radius: 12px;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
    overflow: hidden;
  }

  .erd-astro-container {
    position: relative;
    background: linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%);
  }

  .sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border: 0;
  }

  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }

  /* High contrast mode support */
  @media (prefers-contrast: high) {
    .erd-wrapper {
      border: 2px solid black;
      background: white;
    }
  }

  /* Reduced motion support */
  @media (prefers-reduced-motion: reduce) {
    .erd-spinner {
      animation: none;
    }
    
    .erd-wrapper * {
      transition: none !important;
      animation: none !important;
    }
  }

  /* Dark mode support */
  @media (prefers-color-scheme: dark) {
    .erd-wrapper {
      background: #1e293b;
      color: #f1f5f9;
    }
    
    .erd-astro-container {
      background: linear-gradient(135deg, #1e293b 0%, #334155 100%);
    }
    
    .erd-loading-state {
      color: #cbd5e1 !important;
    }
  }

  /* Mobile optimizations */
  @media (max-width: 768px) {
    .erd-wrapper {
      border-radius: 8px;
      margin: 0 -1rem;
    }
    
    .erd-astro-container {
      min-height: 500px;
    }
  }

  /* Large screen optimizations */
  @media (min-width: 1920px) {
    .erd-wrapper {
      border-radius: 16px;
    }
  }

  /* Focus management for accessibility */
  .erd-wrapper:focus-within {
    outline: 2px solid #841839;
    outline-offset: 2px;
  }

  /* Performance optimization - will-change for animations */
  .erd-astro-container {
    will-change: transform;
  }

  /* Error state styling */
  .erd-error-state {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    text-align: center;
    padding: 2rem;
    background: #fef2f2;
    border: 1px solid #fecaca;
    border-radius: 8px;
    color: #dc2626;
    max-width: 400px;
    width: 90%;
  }

  .erd-error-content h3 {
    margin: 0 0 1rem 0;
    font-size: 1.25rem;
    font-weight: 600;
  }

  .erd-error-content p {
    margin: 0 0 1rem 0;
    font-size: 0.875rem;
    line-height: 1.5;
  }

  .erd-error-button {
    margin-top: 1rem;
    padding: 0.5rem 1rem;
    background: #dc2626;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-size: 0.875rem;
    transition: background 0.2s;
  }

  .erd-error-button:hover {
    background: #b91c1c;
  }

  .erd-error-button:focus {
    outline: 2px solid #dc2626;
    outline-offset: 2px;
  }

  /* Dark mode error styling */
  @media (prefers-color-scheme: dark) {
    .erd-error-state {
      background: #3f2937;
      border-color: #6b7280;
      color: #f87171;
    }

    .erd-error-button {
      background: #ef4444;
    }

    .erd-error-button:hover {
      background: #dc2626;
    }
  }
</style>

<script>
  // Consolidated ERD initialization - component scoped for better production reliability
  document.addEventListener('DOMContentLoaded', function() {
    // Find ERD containers
    const erdContainers = document.querySelectorAll('[data-erd-auto-init]');
    
    erdContainers.forEach((container) => {
      try {
        // Get data from DOM attributes (more reliable than global objects)
        const entitiesData = container.dataset.erdEntities;
        const relationshipsData = container.dataset.erdRelationships;
        const containerId = container.dataset.containerId;
        
        if (!entitiesData || !relationshipsData) {
          showError(container, 'ERD Data Loading Error', 'Unable to find ERD data in DOM attributes');
          return;
        }
        
        let entities, relationships;
        try {
          entities = JSON.parse(entitiesData);
          relationships = JSON.parse(relationshipsData);
        } catch (error) {
          showError(container, 'ERD Data Parsing Error', 'Invalid JSON data in DOM attributes');
          return;
        }
        
        if (!entities || !relationships) {
          showError(container, 'ERD Data Error', 'Invalid ERD data structure');
          return;
        }
        
        if (entities.length === 0) {
          showError(container, 'ERD Data Warning', 'No table data available to display');
          return;
        }
        
        // Initialize simple ERD
        initializeSimpleERD(container, entities, relationships, containerId);

      } catch (error) {
        showError(container, 'ERD Loading Error', 'Unable to load the interactive ERD. Please refresh the page or try again later.');
      }
    });
  });

  function showError(container, title, message) {
    // Remove loading state
    const loadingState = container.querySelector('.erd-loading-state');
    if (loadingState) {
      loadingState.remove();
    }
    
    const errorDiv = document.createElement('div');
    errorDiv.innerHTML = `
      <div style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); text-align: center; color: #dc2626; background: #fef2f2; padding: 2rem; border-radius: 8px; border: 1px solid #fecaca; max-width: 400px;">
        <h3 style="margin: 0 0 1rem 0; font-size: 1.25rem; font-weight: 600;">${title}</h3>
        <p style="margin: 0 0 1rem 0; font-size: 0.875rem;">${message}</p>
        <button onclick="window.location.reload()" style="margin-top: 1rem; padding: 0.5rem 1rem; background: #dc2626; color: white; border: none; border-radius: 4px; cursor: pointer; font-size: 0.875rem;">
          Refresh Page
        </button>
      </div>
    `;
    container.appendChild(errorDiv);
  }

  function initializeSimpleERD(container, entities, relationships, containerId) {
    // Remove loading state
    const loadingState = container.querySelector('.erd-loading-state');
    if (loadingState) {
      loadingState.remove();
    }

    // Create a simplified visual ERD
    const erdContainer = document.createElement('div');
    erdContainer.style.cssText = `
      width: 100%;
      height: 100%;
      position: relative;
      background: linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%);
      overflow: auto;
      padding: 20px;
    `;

    // Create grid of entities
    const gridContainer = document.createElement('div');
    gridContainer.style.cssText = `
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
      gap: 20px;
      max-width: 1400px;
      margin: 0 auto;
    `;

    entities.forEach(entity => {
      const entityCard = createEntityCard(entity);
      gridContainer.appendChild(entityCard);
    });

    erdContainer.appendChild(gridContainer);

    // Add title and legend with view toggle
    const titleDiv = document.createElement('div');
    titleDiv.innerHTML = `
      <div style="text-align: center; margin-bottom: 30px;">
        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px; flex-wrap: wrap; gap: 10px;">
          <div style="flex: 1; min-width: 50px;"></div>
          <div style="text-align: center; flex: 2; min-width: 300px;">
            <h2 style="color: #841839; font-size: clamp(18px, 4vw, 24px); font-weight: bold; margin: 0;">CLIF 2.0.0 Entity Relationship Diagram</h2>
            <p style="color: #666; margin: 5px 0 0 0; font-size: clamp(12px, 2.5vw, 14px);">Interactive view of all ${entities.length} tables and their relationships</p>
          </div>
          <div style="flex: 1; display: flex; justify-content: flex-end; min-width: 200px;">
            <div id="view-toggle-${containerId}" style="display: flex; background: #f3f4f6; border-radius: 8px; padding: 4px; width: 100%; max-width: 200px;">
              <button id="card-view-btn-${containerId}" style="padding: 8px 12px; border: none; background: #841839; color: white; border-radius: 6px; font-size: clamp(12px, 2vw, 14px); cursor: pointer; transition: all 0.2s; flex: 1;">
                Card View
              </button>
              <button id="diagram-view-btn-${containerId}" style="padding: 8px 12px; border: none; background: transparent; color: #666; border-radius: 6px; font-size: clamp(12px, 2vw, 14px); cursor: pointer; transition: all 0.2s; flex: 1;">
                Diagram View
              </button>
            </div>
          </div>
        </div>
        
        <!-- Mobile: Stack title and toggle vertically -->
        <style>
          @media (max-width: 768px) {
            #view-toggle-${containerId} {
              order: 3;
              width: 100% !important;
              max-width: 300px !important;
              margin: 10px auto 0 auto !important;
            }
            #view-toggle-${containerId} button {
              padding: 10px 16px !important;
              font-size: 14px !important;
            }
          }
        </style>
      </div>
      <div style="display: flex; justify-content: center; gap: 20px; margin-bottom: 30px; flex-wrap: wrap;">
        <div style="display: flex; align-items: center; gap: 8px;">
          <div style="width: 20px; height: 20px; background: #FF8C00; border-radius: 4px;"></div>
          <span style="font-size: 14px; color: #666;">Beta Tables</span>
        </div>
        <div style="display: flex; align-items: center; gap: 8px;">
          <div style="width: 20px; height: 20px; background: #E5E7EB; border: 1px solid #CBD5E1; border-radius: 4px;"></div>
          <span style="font-size: 14px; color: #666;">Concept Tables</span>
        </div>
        <div style="display: flex; align-items: center; gap: 8px;">
          <div style="width: 20px; height: 20px; background: #9CA3AF; border-radius: 4px;"></div>
          <span style="font-size: 14px; color: #666;">Future Tables</span>
        </div>
      </div>
    `;
    
    erdContainer.insertBefore(titleDiv, gridContainer);
    container.appendChild(erdContainer);

    // Add view toggle functionality
    setupViewToggle(container, containerId, entities, relationships);

    console.log('Simple ERD initialized successfully');
    console.log('Available views: Card (default), Diagram (toggle)');
    
    // Add a small indicator to show ERD is ready
    const readyIndicator = document.createElement('div');
    readyIndicator.style.cssText = `
      position: absolute;
      top: 10px;
      left: 10px;
      background: #22c55e;
      color: white;
      padding: 4px 8px;
      border-radius: 4px;
      font-size: 12px;
      z-index: 100;
      opacity: 1;
      transition: opacity 2s ease;
    `;
    readyIndicator.textContent = 'ERD Ready';
    container.appendChild(readyIndicator);
    
    // Auto-hide the indicator after 3 seconds
    setTimeout(() => {
      readyIndicator.style.opacity = '0';
      setTimeout(() => {
        if (readyIndicator.parentNode) {
          readyIndicator.parentNode.removeChild(readyIndicator);
        }
      }, 2000);
    }, 3000);
  }

  function setupViewToggle(container, containerId, entities, relationships) {
    try {
      const cardViewBtn = container.querySelector(`#card-view-btn-${containerId}`);
      const diagramViewBtn = container.querySelector(`#diagram-view-btn-${containerId}`);
      const erdContainer = container.querySelector('.erd-astro-container > div:last-child');
      
      if (!cardViewBtn || !diagramViewBtn || !erdContainer) {
        return;
      }
      
      let currentView = 'card';
      let diagramContainer = null;

    cardViewBtn.addEventListener('click', () => {
      if (currentView === 'card') return;
      
      // Update button styles
      cardViewBtn.style.background = '#841839';
      cardViewBtn.style.color = 'white';
      diagramViewBtn.style.background = 'transparent';
      diagramViewBtn.style.color = '#666';
      
      // Show card view, hide diagram view
      erdContainer.style.display = 'block';
      if (diagramContainer) {
        diagramContainer.style.display = 'none';
      }
      
      currentView = 'card';
      console.log('Switched to card view');
    });

    diagramViewBtn.addEventListener('click', () => {
      console.log('Diagram view button clicked, current view:', currentView);
      if (currentView === 'diagram') return;
      
      // Update button styles
      diagramViewBtn.style.background = '#841839';
      diagramViewBtn.style.color = 'white';
      cardViewBtn.style.background = 'transparent';
      cardViewBtn.style.color = '#666';
      
      // Create diagram view if it doesn't exist
      if (!diagramContainer) {
        diagramContainer = createDiagramView(entities, relationships, containerId);
        container.querySelector('.erd-astro-container').appendChild(diagramContainer);
      }
      
      // Hide card view, show diagram view
      erdContainer.style.display = 'none';
      diagramContainer.style.display = 'block';
      
      currentView = 'diagram';
    });
    
    } catch (error) {
      // Error setting up view toggle
    }
  }

  function createDiagramView(entities, relationships, containerId) {
    try {
      
      const colors = {
        beta: '#CC5500',    // Darker orange matching static ERD
        concept: '#D1D5DB', // Medium gray matching static ERD
        future: '#6B7280'   // Darker gray matching static ERD
      };

    // Create main diagram container
    const diagramContainer = document.createElement('div');
    diagramContainer.style.cssText = `
      display: none;
      width: 100%;
      height: 600px;
      position: relative;
      background: linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%);
      overflow: auto;
      min-height: 600px;
      border: 2px solid #e5e7eb;
      border-radius: 12px;
      padding: 20px;
    `;

    // Create inner container for the diagram with zoom capability
    const diagramInner = document.createElement('div');
    diagramInner.id = `diagram-inner-${containerId}`;
    diagramInner.style.cssText = `
      position: relative;
      width: 1400px;
      height: 1400px;
      transform-origin: center center;
      transition: transform 0.3s ease;
      margin: 0 auto;
    `;

    // Create styles for the diagram matching ERD-2.0.0.png
    const styles = document.createElement('style');
    styles.textContent = `
      .erd-table-box {
        position: absolute;
        width: 180px;
        min-height: 80px;
        background: white;
        border: 2px solid #374151;
        border-radius: 6px;
        box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        transition: all 0.2s ease;
        cursor: pointer;
        overflow: hidden;
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
      }
      .erd-table-box:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0,0,0,0.2);
        border-color: #1f2937;
      }
      .erd-table-header {
        padding: 8px 12px;
        color: white;
        font-weight: 600;
        text-align: left;
        font-size: 13px;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        border-bottom: 1px solid rgba(255,255,255,0.2);
      }
      .erd-table-content {
        padding: 10px 12px;
        font-size: 11px;
        color: #374151;
        line-height: 1.4;
      }
      .erd-table-box.beta .erd-table-header {
        background: ${colors.beta};
      }
      .erd-table-box.concept .erd-table-header {
        background: ${colors.concept};
        color: #1f2937;
      }
      .erd-table-box.future .erd-table-header {
        background: ${colors.future};
        color: white;
      }
      .erd-connection {
        position: absolute;
        background: #000000;
        transform-origin: left center;
        height: 2px;
        pointer-events: none;
        z-index: 1;
      }
      .erd-connection::after {
        content: '';
        position: absolute;
        right: -10px;
        top: -4px;
        width: 0;
        height: 0;
        border-left: 10px solid #000000;
        border-top: 5px solid transparent;
        border-bottom: 5px solid transparent;
      }
      .erd-badge {
        display: inline-block;
        padding: 2px 6px;
        font-size: 9px;
        font-weight: bold;
        letter-spacing: 0.5px;
        text-transform: uppercase;
        border-radius: 3px;
        margin-bottom: 4px;
      }
      .beta-badge {
        background: #FEF3C7;
        color: #92400E;
        border: 1px solid #FCD34D;
      }
      .concept-badge {
        background: #F3F4F6;
        color: #374151;
        border: 1px solid #D1D5DB;
      }
      .future-badge {
        background: #E5E7EB;
        color: #374151;
        border: 1px solid #9CA3AF;
      }
    `;
    diagramContainer.appendChild(styles);

    // Add zoom controls
    const controlsDiv = document.createElement('div');
    controlsDiv.style.cssText = `
      position: absolute;
      top: 20px;
      right: 20px;
      display: flex;
      gap: 8px;
      z-index: 10;
      flex-wrap: wrap;
    `;
    
    controlsDiv.innerHTML = `
      <button id="zoom-in-${containerId}" style="width: 40px; height: 40px; border: none; background: white; border-radius: 50%; box-shadow: 0 2px 8px rgba(0,0,0,0.15); cursor: pointer; display: flex; align-items: center; justify-content: center; font-size: 18px; font-weight: bold;">+</button>
      <button id="zoom-out-${containerId}" style="width: 40px; height: 40px; border: none; background: white; border-radius: 50%; box-shadow: 0 2px 8px rgba(0,0,0,0.15); cursor: pointer; display: flex; align-items: center; justify-content: center; font-size: 18px; font-weight: bold;">−</button>
      <button id="zoom-fit-${containerId}" style="padding: 8px 12px; border: none; background: white; border-radius: 20px; box-shadow: 0 2px 8px rgba(0,0,0,0.15); cursor: pointer; font-size: 12px; font-weight: 500;">Fit</button>
    `;

    // Create table boxes for each entity
    entities.forEach(entity => {
      const tableBox = document.createElement('div');
      tableBox.className = `erd-table-box ${entity.maturity}`;
      tableBox.style.cssText = `
        left: ${entity.position.x}px;
        top: ${entity.position.y}px;
      `;
      
      // Format table name to match ERD style
      const displayName = entity.name
        .split('_')
        .map(word => word.charAt(0).toUpperCase() + word.slice(1))
        .join(' ');
      
      tableBox.innerHTML = `
        <div class="erd-table-header">${displayName}</div>
        <div class="erd-table-content">
          <div class="${entity.maturity}-badge erd-badge">${entity.maturity}</div>
          <div style="font-size: 10px; color: #6B7280;">${entity.fields?.length || 0} fields</div>
        </div>
      `;
      
      // Add click handler for details
      tableBox.addEventListener('click', () => {
        console.log(`Clicked on table: ${entity.name}`);
        if (entity.maturity === 'concept' && entity.fields && entity.fields.length > 0) {
          showDetailedTableView(entity, colors, tableBox);
        }
      });
      
      diagramInner.appendChild(tableBox);
    });

    // Create connections between tables
    relationships.forEach(rel => {
      const fromEntity = entities.find(e => e.id === rel.from);
      const toEntity = entities.find(e => e.id === rel.to);
      
      if (fromEntity && toEntity) {
        const connection = createConnection(fromEntity, toEntity);
        if (connection) {
          diagramInner.appendChild(connection);
        }
      }
    });

    // Append inner diagram to container
    diagramContainer.appendChild(controlsDiv);
    diagramContainer.appendChild(diagramInner);

    // Add zoom functionality
    let currentScale = 1;
    const minScale = 0.3;
    const maxScale = 2;

    const zoomIn = () => {
      if (currentScale < maxScale) {
        currentScale = Math.min(maxScale, currentScale + 0.2);
        diagramInner.style.transform = `scale(${currentScale})`;
      }
    };

    const zoomOut = () => {
      if (currentScale > minScale) {
        currentScale = Math.max(minScale, currentScale - 0.2);
        diagramInner.style.transform = `scale(${currentScale})`;
      }
    };

    const zoomFit = () => {
      currentScale = 1;
      diagramInner.style.transform = 'scale(1)';
    };

    // Setup zoom controls
    const zoomInBtn = diagramContainer.querySelector(`#zoom-in-${containerId}`);
    const zoomOutBtn = diagramContainer.querySelector(`#zoom-out-${containerId}`);
    const zoomFitBtn = diagramContainer.querySelector(`#zoom-fit-${containerId}`);
    
    if (zoomInBtn && zoomOutBtn && zoomFitBtn) {
      zoomInBtn.addEventListener('click', zoomIn);
      zoomOutBtn.addEventListener('click', zoomOut);
      zoomFitBtn.addEventListener('click', zoomFit);
      console.log('Zoom controls setup successfully');
    } else {
      console.error('Failed to find zoom control buttons');
    }

    console.log('Diagram view created successfully');
    return diagramContainer;
    
    } catch (error) {
      console.error('Error creating diagram view:', error);
      const errorContainer = document.createElement('div');
      errorContainer.innerHTML = `
        <div style="padding: 20px; text-align: center; color: #dc2626;">
          <h3>Diagram View Error</h3>
          <p>Unable to create diagram view. Please try the card view instead.</p>
        </div>
      `;
      return errorContainer;
    }
  }

  // Create a connection line between two entities
  function createConnection(fromEntity, toEntity) {
    const boxWidth = 180;
    const boxHeight = 80;
    
    const fromCenterX = fromEntity.position.x + boxWidth / 2;
    const fromCenterY = fromEntity.position.y + boxHeight / 2;
    const toCenterX = toEntity.position.x + boxWidth / 2;
    const toCenterY = toEntity.position.y + boxHeight / 2;
    
    // Calculate angle and distance
    const dx = toCenterX - fromCenterX;
    const dy = toCenterY - fromCenterY;
    const angle = Math.atan2(dy, dx);
    // Calculate distance for potential future use
    // const distance = Math.sqrt(dx * dx + dy * dy);
    
    // Calculate where line should start and end (at box edges)
    const fromEdgeX = fromCenterX + (boxWidth / 2) * Math.cos(angle);
    const fromEdgeY = fromCenterY + (boxHeight / 2) * Math.sin(angle);
    const toEdgeX = toCenterX - (boxWidth / 2) * Math.cos(angle);
    const toEdgeY = toCenterY - (boxHeight / 2) * Math.sin(angle);
    
    // Calculate actual line distance
    const lineDx = toEdgeX - fromEdgeX;
    const lineDy = toEdgeY - fromEdgeY;
    const lineDistance = Math.sqrt(lineDx * lineDx + lineDy * lineDy);
    const lineAngle = Math.atan2(lineDy, lineDx) * 180 / Math.PI;
    
    if (lineDistance <= 10) {
      return null; // Too close
    }
    
    const connection = document.createElement('div');
    connection.className = 'erd-connection';
    connection.style.cssText = `
      left: ${fromEdgeX}px;
      top: ${fromEdgeY}px;
      width: ${lineDistance}px;
      transform: rotate(${lineAngle}deg);
      transform-origin: 0 50%;
    `;
    
    return connection;
  }


  // Performance optimization: limit initial field display
  function createEntityCard(entity) {
    const colors = {
      beta: '#FF8C00',    // Orange/amber color matching static ERD
      concept: '#E5E7EB', // Light gray color matching static ERD
      future: '#9CA3AF'   // Darker gray color matching static ERD
    };

    const card = document.createElement('div');
    card.style.cssText = `
      background: white;
      border-radius: 12px;
      box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
      overflow: hidden;
      border: 2px solid #e5e7eb;
      transition: all 0.2s ease;
      cursor: pointer;
    `;

    // Create initial preview content
    const previewContent = createEntityPreview(entity, colors);
    card.innerHTML = previewContent;

    // Add click handler to show detailed view for concept tables
    card.addEventListener('click', () => {
      if (entity.maturity === 'concept' && entity.fields && entity.fields.length > 0) {
        showDetailedTableView(entity, colors);
      }
    });

    // Add hover effect
    card.addEventListener('mouseenter', () => {
      card.style.transform = 'translateY(-2px)';
      card.style.boxShadow = '0 10px 15px -3px rgba(0, 0, 0, 0.1)';
      card.style.borderColor = colors[entity.maturity];
    });

    card.addEventListener('mouseleave', () => {
      card.style.transform = 'translateY(0)';
      card.style.boxShadow = '0 4px 6px -1px rgba(0, 0, 0, 0.1)';
      card.style.borderColor = '#e5e7eb';
    });

    return card;
  }

  function createEntityPreview(entity, colors) {
    // Determine text color based on background
    const textColor = entity.maturity === 'concept' ? '#374151' : 'white';
    const badgeBg = entity.maturity === 'concept' ? 'rgba(0,0,0,0.1)' : 'rgba(255,255,255,0.2)';
    
    return `
      <div style="background: ${colors[entity.maturity]}; padding: 16px; color: ${textColor};">
        <div style="display: flex; justify-content: space-between; align-items: center;">
          <h3 style="margin: 0; font-size: 18px; font-weight: bold; flex: 1;">${entity.name}</h3>
          <span style="background: ${badgeBg}; padding: 4px 8px; border-radius: 12px; font-size: 11px; text-transform: uppercase; font-weight: 600;">${entity.maturity}</span>
        </div>
      </div>
      <div style="padding: 16px;">
        <p style="margin: 0 0 12px 0; color: #666; font-size: 13px; line-height: 1.4;">${entity.description || 'No description available'}</p>
        <div style="border-top: 1px solid #e5e7eb; padding-top: 12px;">
          <h4 style="margin: 0 0 8px 0; font-size: 14px; font-weight: 600; color: #374151;">Fields (${entity.fields.length})</h4>
          <div style="max-height: 150px; overflow-y: auto;">
            ${entity.fields.slice(0, 6).map(field => `
              <div style="display: flex; justify-content: space-between; align-items: center; padding: 4px 0; border-bottom: 1px solid #f3f4f6;">
                <span style="font-family: 'Monaco', 'Menlo', monospace; font-size: 12px; color: #1f2937; font-weight: 500;">${field.name}</span>
                <span style="font-size: 11px; color: #6b7280; background: #f3f4f6; padding: 2px 6px; border-radius: 4px;">${field.type}</span>
              </div>
            `).join('')}
            ${entity.fields.length > 6 ? `<div style="padding: 8px 0; text-align: center; color: #6b7280; font-size: 12px;">... and ${entity.fields.length - 6} more fields</div>` : ''}
          </div>
        </div>
        ${entity.maturity === 'concept' ? `
          <div style="margin-top: 12px; padding: 8px; background: #f8f9fa; border-radius: 6px; text-align: center;">
            <span style="font-size: 12px; color: #6b7280; font-weight: 500;">Click to view detailed specifications</span>
          </div>
        ` : ''}
      </div>
    `;
  }

  function showDetailedTableView(entity, colors) {
    // Format display name to match diagram style
    const displayName = entity.name
      .split('_')
      .map(word => word.charAt(0).toUpperCase() + word.slice(1))
      .join(' ');
    
    // Create modal overlay
    const modalOverlay = document.createElement('div');
    modalOverlay.style.cssText = `
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0, 0, 0, 0.8);
      z-index: 1000;
      display: flex;
      align-items: center;
      justify-content: center;
      padding: 20px;
      backdrop-filter: blur(4px);
    `;

    const modalContent = document.createElement('div');
    modalContent.style.cssText = `
      background: white;
      border-radius: 6px;
      max-width: 900px;
      max-height: 90vh;
      width: 100%;
      overflow-y: auto;
      box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
      border: 2px solid #374151;
    `;

    // Determine text color for modal header
    const modalTextColor = entity.maturity === 'concept' ? '#1f2937' : 'white';
    const modalButtonBg = entity.maturity === 'concept' ? 'rgba(31,41,55,0.1)' : 'rgba(255,255,255,0.2)';
    
    modalContent.innerHTML = `
      <div style="background: ${colors[entity.maturity]}; padding: 16px 20px; color: ${modalTextColor}; position: sticky; top: 0; z-index: 10; border-bottom: 1px solid rgba(255,255,255,0.2);">
        <div style="display: flex; justify-content: space-between; align-items: center;">
          <div>
            <h2 style="margin: 0; font-size: 18px; font-weight: 600; text-transform: uppercase; letter-spacing: 0.5px;">${displayName}</h2>
            <div style="margin-top: 4px;">
              <span style="display: inline-block; padding: 2px 8px; font-size: 10px; font-weight: bold; letter-spacing: 0.5px; text-transform: uppercase; border-radius: 3px; background: ${entity.maturity === 'concept' ? '#F3F4F6' : 'rgba(255,255,255,0.2)'}; color: ${entity.maturity === 'concept' ? '#374151' : 'white'}; border: 1px solid ${entity.maturity === 'concept' ? '#D1D5DB' : 'rgba(255,255,255,0.3)'};">
                ${entity.maturity} Table
              </span>
              <span style="margin-left: 8px; font-size: 13px; opacity: 0.9;">${entity.fields?.length || 0} fields</span>
            </div>
          </div>
          <button id="closeModal" style="background: ${modalButtonBg}; border: none; color: ${modalTextColor}; font-size: 24px; cursor: pointer; border-radius: 50%; width: 36px; height: 36px; display: flex; align-items: center; justify-content: center; font-weight: 300; transition: all 0.2s;">×</button>
        </div>
        <p style="margin: 10px 0 0 0; opacity: 0.85; font-size: 13px; line-height: 1.5;">${entity.description}</p>
      </div>
      
      <div style="padding: 20px;">
        <h3 style="margin: 0 0 16px 0; color: #1f2937; font-size: 16px; font-weight: 600; text-transform: uppercase; letter-spacing: 0.5px; border-bottom: 2px solid #374151; padding-bottom: 8px;">Field Specifications</h3>
        
        <div style="overflow-x: auto;">
          <table style="width: 100%; border-collapse: collapse; font-size: 13px; border: 1px solid #e5e7eb;">
            <thead>
              <tr style="background: #f3f4f6;">
                <th style="padding: 10px 12px; text-align: left; border-bottom: 2px solid #374151; font-weight: 600; color: #1f2937; text-transform: uppercase; letter-spacing: 0.5px; font-size: 11px;">Field Name</th>
                <th style="padding: 10px 12px; text-align: left; border-bottom: 2px solid #374151; font-weight: 600; color: #1f2937; text-transform: uppercase; letter-spacing: 0.5px; font-size: 11px;">Type</th>
                <th style="padding: 10px 12px; text-align: left; border-bottom: 2px solid #374151; font-weight: 600; color: #1f2937; text-transform: uppercase; letter-spacing: 0.5px; font-size: 11px;">Description</th>
                <th style="padding: 10px 12px; text-align: left; border-bottom: 2px solid #374151; font-weight: 600; color: #1f2937; text-transform: uppercase; letter-spacing: 0.5px; font-size: 11px;">Values/Restrictions</th>
              </tr>
            </thead>
            <tbody>
              ${entity.fields.map((field, index) => `
                <tr style="border-bottom: 1px solid #e5e7eb; ${index % 2 === 0 ? 'background: #fafafa;' : 'background: white;'}">
                  <td style="padding: 10px 12px; font-family: 'Consolas', 'Monaco', monospace; font-weight: 500; color: #1f2937; font-size: 12px;">${field.name}</td>
                  <td style="padding: 10px 12px;">
                    <span style="display: inline-block; padding: 2px 6px; font-family: 'Consolas', 'Monaco', monospace; color: #374151; background: #e5e7eb; border-radius: 3px; font-size: 11px; font-weight: 500;">${field.type}</span>
                  </td>
                  <td style="padding: 10px 12px; color: #4b5563; line-height: 1.4; font-size: 12px;">${field.description || 'No description'}</td>
                  <td style="padding: 10px 12px; font-size: 11px;">
                    ${field.values ? 
                      `<div style="background: #dbeafe; padding: 4px 8px; border-radius: 3px; margin-bottom: 4px; border: 1px solid #93c5fd;"><strong style="color: #1e40af;">Values:</strong> <span style="color: #3730a3;">${field.values.join(', ')}</span></div>` : 
                      ''
                    }
                    ${field.restrictions ? 
                      `<div style="background: #fed7aa; padding: 4px 8px; border-radius: 3px; border: 1px solid #fb923c;"><strong style="color: #c2410c;">Restrictions:</strong> <span style="color: #7c2d12;">${field.restrictions}</span></div>` : 
                      ''
                    }
                  </td>
                </tr>
              `).join('')}
            </tbody>
          </table>
        </div>

        ${entity.notes && entity.notes.length > 0 ? `
          <div style="margin-top: 20px; padding: 16px; background: #f9fafb; border-radius: 6px; border: 1px solid #e5e7eb;">
            <h3 style="margin: 0 0 12px 0; color: #1f2937; font-size: 14px; font-weight: 600; text-transform: uppercase; letter-spacing: 0.5px;">Implementation Notes</h3>
            <ul style="margin: 0; padding-left: 20px; color: #4b5563; font-size: 13px;">
              ${entity.notes.map(note => `<li style="margin-bottom: 6px; line-height: 1.5;">${note}</li>`).join('')}
            </ul>
          </div>
        ` : ''}

        ${entity.example ? `
          <div style="margin-top: 20px;">
            <h3 style="margin: 0 0 12px 0; color: #1f2937; font-size: 14px; font-weight: 600; text-transform: uppercase; letter-spacing: 0.5px;">Example Data</h3>
            <div style="background: #1f2937; padding: 16px; border-radius: 6px; overflow-x: auto; border: 2px solid #374151;">
              <pre style="margin: 0; white-space: pre-wrap; font-family: 'Consolas', 'Monaco', monospace; font-size: 11px; line-height: 1.6; color: #e5e7eb;">${entity.example}</pre>
            </div>
          </div>
        ` : ''}
      </div>
    `;

    modalOverlay.appendChild(modalContent);
    document.body.appendChild(modalOverlay);

    // Close modal handlers
    const closeBtn = modalContent.querySelector('#closeModal');
    const closeModal = () => {
      document.body.removeChild(modalOverlay);
    };

    closeBtn.addEventListener('click', closeModal);
    modalOverlay.addEventListener('click', (e) => {
      if (e.target === modalOverlay) closeModal();
    });

    // Escape key handler
    const escHandler = (e) => {
      if (e.key === 'Escape') {
        closeModal();
        document.removeEventListener('keydown', escHandler);
      }
    };
    document.addEventListener('keydown', escHandler);
  }
</script>

<!-- Critical resources will be loaded as needed -->

<!-- Performance monitoring -->
{import.meta.env.PROD && (
  <script>
    // Monitor ERD performance
    if ('PerformanceObserver' in window) {
      const observer = new PerformanceObserver((list) => {
        const entries = list.getEntries();
        entries.forEach((entry) => {
          if (entry.name.includes('erd') && typeof window.gtag !== 'undefined') {
            window.gtag('event', 'erd_performance', {
              metric_name: entry.name,
              duration: Math.round(entry.duration),
              custom_parameters: {
                performance_category: 'erd_rendering'
              }
            });
          }
        });
      });
      
      observer.observe({ entryTypes: ['measure', 'navigation'] });
    }
  </script>
)}