---
// Optimized Interactive ERD Component for CLIF 2.0.0
import type { ERDEntity, ERDRelationship } from './erd/ERDTypes';

export interface Props {
  tables?: any[];
  height?: string;
  className?: string;
  showFullscreenButton?: boolean;
  showLegend?: boolean;
  enableKeyboardNavigation?: boolean;
  enableSearch?: boolean;
}

const { 
  tables = [], 
  height = '800px',
  className = '',
  showFullscreenButton = true,
  showLegend = true,
  enableKeyboardNavigation = true,
  enableSearch = true
} = Astro.props;

// Transform CLIF table data to ERD entities
function transformTableToEntity(table: any, maturity: 'beta' | 'concept' | 'future'): ERDEntity {
  return {
    id: table.id,
    name: table.name || table.id,
    maturity,
    position: getEntityPosition(table.id),
    fields: table.fields?.slice(0, 8) || [], // Limit fields for performance
    description: table.description,
    notes: table.notes
  };
}

// Get entity position based on ID (matching static ERD layout)
function getEntityPosition(entityId: string): { x: number; y: number } {
  const positions: Record<string, { x: number; y: number }> = {
    // Row 1 - Beta tables
    'patient': { x: 50, y: 50 },
    'hospitalization': { x: 320, y: 50 },
    'adt': { x: 590, y: 50 },
    'vitals': { x: 860, y: 50 },
    'medication_admin_continuous': { x: 1130, y: 50 },
    
    // Row 2 - Beta tables continued  
    'labs': { x: 50, y: 280 },
    'patient_assessments': { x: 320, y: 280 },
    'position': { x: 590, y: 280 },
    'respiratory_support': { x: 860, y: 280 },
    
    // Row 3 - Concept tables
    'code_status': { x: 50, y: 510 },
    'crrt_therapy': { x: 320, y: 510 },
    'ecmo_mcs': { x: 590, y: 510 },
    'hospital_diagnosis': { x: 860, y: 510 },
    'intake_output': { x: 1130, y: 510 },
    
    // Row 4 - More concept tables
    'invasive_hemodynamics': { x: 50, y: 740 },
    'key_icu_orders': { x: 320, y: 740 },
    'medication_admin_intermittent': { x: 590, y: 740 },
    'medication_orders': { x: 860, y: 740 },
    'microbiology_culture': { x: 1130, y: 740 },
    
    // Row 5 - More concept tables
    'microbiology_non_culture': { x: 50, y: 970 },
    'procedures': { x: 320, y: 970 },
    'provider': { x: 590, y: 970 },
    'sensitivity': { x: 860, y: 970 },
    'therapy_details': { x: 1130, y: 970 },
    
    // Row 6 - Final tables
    'transfusion': { x: 50, y: 1200 },
    'clinical_decision_support': { x: 320, y: 1200 }
  };
  
  return positions[entityId] || { x: 50, y: 50 };
}

// Determine maturity level from table metadata
function getMaturityLevel(table: any): 'beta' | 'concept' | 'future' {
  const betaTables = ['patient', 'hospitalization', 'adt', 'vitals', 'labs', 'medication_admin_continuous', 'patient_assessments', 'position', 'respiratory_support'];
  const futureTables = ['clinical_decision_support'];
  
  if (betaTables.includes(table.id)) return 'beta';
  if (futureTables.includes(table.id)) return 'future';
  return 'concept';
}

// Create entities from table data
const entities: ERDEntity[] = tables.map(table => 
  transformTableToEntity(table, getMaturityLevel(table))
);

// Create relationships (all tables connect to hospitalization)
const relationships: ERDRelationship[] = entities
  .filter(entity => entity.id !== 'patient' && entity.id !== 'hospitalization')
  .map(entity => ({
    from: 'hospitalization',
    to: entity.id,
    field: 'hospitalization_id',
    type: 'one-to-many' as const
  }));

// Add patient -> hospitalization relationship
if (entities.find(e => e.id === 'patient') && entities.find(e => e.id === 'hospitalization')) {
  relationships.unshift({
    from: 'patient',
    to: 'hospitalization', 
    field: 'patient_id',
    type: 'one-to-many'
  });
}

// Generate unique container ID
const containerId = `erd-container-${Math.random().toString(36).substr(2, 9)}`;
---

<div 
  class={`erd-wrapper ${className}`}
  style={`height: ${height}; position: relative; width: 100%;`}
>
  <!-- ERD Container -->
  <div 
    id={containerId}
    class="erd-astro-container"
    style="width: 100%; height: 100%; min-height: 600px;"
    role="application"
    aria-label="Interactive Entity Relationship Diagram for CLIF 2.0.0"
    data-erd-auto-init="true"
    data-enable-analytics="false"
    data-enable-keyboard={enableKeyboardNavigation.toString()}
    data-enable-search={enableSearch.toString()}
  >
    <!-- Loading state -->
    <div class="erd-loading-state" style="
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      text-align: center;
      font-size: 18px;
      color: #666;
    ">
      <div class="erd-spinner" style="
        border: 3px solid #f3f3f3;
        border-top: 3px solid #841839;
        border-radius: 50%;
        width: 40px;
        height: 40px;
        animation: spin 1s linear infinite;
        margin: 0 auto 16px;
      "></div>
      Loading Interactive ERD...
    </div>
  </div>

  <!-- Instructions for keyboard users -->
  {enableKeyboardNavigation && (
    <div class="sr-only" id="erd-instructions">
      <h2>Keyboard Navigation Instructions</h2>
      <ul>
        <li>Use Tab to navigate between entities</li>
        <li>Press Enter or Space to select an entity</li>
        <li>Use arrow keys to navigate the diagram</li>
        <li>Press Escape to close details panel</li>
        <li>Press Ctrl+F (or Cmd+F) to focus search</li>
        <li>Use + and - keys to zoom in and out</li>
        <li>Press 0 to fit diagram to view</li>
      </ul>
    </div>
  )}
</div>

<style>
  .erd-wrapper {
    position: relative;
    background: #f8fafc;
    border-radius: 12px;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
    overflow: hidden;
  }

  .erd-astro-container {
    position: relative;
    background: linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%);
  }

  .sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border: 0;
  }

  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }

  /* High contrast mode support */
  @media (prefers-contrast: high) {
    .erd-wrapper {
      border: 2px solid black;
      background: white;
    }
  }

  /* Reduced motion support */
  @media (prefers-reduced-motion: reduce) {
    .erd-spinner {
      animation: none;
    }
    
    .erd-wrapper * {
      transition: none !important;
      animation: none !important;
    }
  }

  /* Dark mode support */
  @media (prefers-color-scheme: dark) {
    .erd-wrapper {
      background: #1e293b;
      color: #f1f5f9;
    }
    
    .erd-astro-container {
      background: linear-gradient(135deg, #1e293b 0%, #334155 100%);
    }
    
    .erd-loading-state {
      color: #cbd5e1 !important;
    }
  }

  /* Mobile optimizations */
  @media (max-width: 768px) {
    .erd-wrapper {
      border-radius: 8px;
      margin: 0 -1rem;
    }
    
    .erd-astro-container {
      min-height: 500px;
    }
  }

  /* Large screen optimizations */
  @media (min-width: 1920px) {
    .erd-wrapper {
      border-radius: 16px;
    }
  }

  /* Focus management for accessibility */
  .erd-wrapper:focus-within {
    outline: 2px solid #841839;
    outline-offset: 2px;
  }

  /* Performance optimization - will-change for animations */
  .erd-astro-container {
    will-change: transform;
  }

  /* Error state styling */
  .erd-error-state {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    text-align: center;
    padding: 2rem;
    background: #fef2f2;
    border: 1px solid #fecaca;
    border-radius: 8px;
    color: #dc2626;
    max-width: 400px;
    width: 90%;
  }

  .erd-error-content h3 {
    margin: 0 0 1rem 0;
    font-size: 1.25rem;
    font-weight: 600;
  }

  .erd-error-content p {
    margin: 0 0 1rem 0;
    font-size: 0.875rem;
    line-height: 1.5;
  }

  .erd-error-button {
    margin-top: 1rem;
    padding: 0.5rem 1rem;
    background: #dc2626;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-size: 0.875rem;
    transition: background 0.2s;
  }

  .erd-error-button:hover {
    background: #b91c1c;
  }

  .erd-error-button:focus {
    outline: 2px solid #dc2626;
    outline-offset: 2px;
  }

  /* Dark mode error styling */
  @media (prefers-color-scheme: dark) {
    .erd-error-state {
      background: #3f2937;
      border-color: #6b7280;
      color: #f87171;
    }

    .erd-error-button {
      background: #ef4444;
    }

    .erd-error-button:hover {
      background: #dc2626;
    }
  }
</style>

<script>
  import { initializeERD } from './erd/ERDClient';
  
  // Client-side initialization with proper Astro integration
  document.addEventListener('DOMContentLoaded', () => {
    // Find all ERD containers that need initialization
    const erdContainers = document.querySelectorAll('[data-erd-auto-init]');
    
    erdContainers.forEach((container) => {
      const containerId = container.id;
      
      try {
        // Get data from embedded JSON scripts
        const entitiesScript = document.querySelector(`#${containerId}-entities`);
        const relationshipsScript = document.querySelector(`#${containerId}-relationships`);
        
        if (!entitiesScript || !relationshipsScript) {
          console.warn(`ERD data scripts not found for container: ${containerId}`);
          return;
        }

        const entities = JSON.parse(entitiesScript.textContent || '[]');
        const relationships = JSON.parse(relationshipsScript.textContent || '[]');
        
        // Get configuration from data attributes
        const enableAnalytics = container.getAttribute('data-enable-analytics') === 'true';
        const enableKeyboardNavigation = container.getAttribute('data-enable-keyboard') !== 'false';
        const enableSearch = container.getAttribute('data-enable-search') !== 'false';

        // Initialize ERD
        const erdResult = initializeERD({
          containerId,
          entities,
          relationships,
          enableAnalytics,
          enableKeyboardNavigation,
          enableSearch
        });

        if (erdResult) {
          // Announce successful load to screen readers
          const announcement = document.createElement('div');
          announcement.setAttribute('aria-live', 'polite');
          announcement.setAttribute('aria-atomic', 'true');
          announcement.style.position = 'absolute';
          announcement.style.left = '-10000px';
          announcement.textContent = `Interactive ERD loaded successfully with ${entities.length} entities and ${relationships.length} relationships.`;
          document.body.appendChild(announcement);
          
          setTimeout(() => {
            if (document.body.contains(announcement)) {
              document.body.removeChild(announcement);
            }
          }, 1000);
        }

      } catch (error) {
        console.error(`Failed to initialize ERD for container ${containerId}:`, error);
      }
    });
  });
</script>

<!-- Pass data to client-side script -->
<script type="application/json" id={`${containerId}-entities`}>
  {JSON.stringify(entities)}
</script>

<script type="application/json" id={`${containerId}-relationships`}>
  {JSON.stringify(relationships)}
</script>

<!-- Preload critical resources -->
<link rel="preload" as="style" href="/fonts/inter.css" />

<!-- Performance monitoring -->
{import.meta.env.PROD && (
  <script>
    // Monitor ERD performance
    if ('PerformanceObserver' in window) {
      const observer = new PerformanceObserver((list) => {
        const entries = list.getEntries();
        entries.forEach((entry) => {
          if (entry.name.includes('erd') && typeof gtag !== 'undefined') {
            gtag('event', 'erd_performance', {
              metric_name: entry.name,
              duration: Math.round(entry.duration),
              custom_parameters: {
                performance_category: 'erd_rendering'
              }
            });
          }
        });
      });
      
      observer.observe({ entryTypes: ['measure', 'navigation'] });
    }
  </script>
)}