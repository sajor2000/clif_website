---
import BaseLayout from '../../layouts/BaseLayout.astro';
import Badge from '../../components/Badge.astro';
import MarkdownIt from 'markdown-it';
import fs from 'node:fs';
import path from 'node:path';

// Read the markdown file at build time
const markdownPath = path.join(process.cwd(), 'src/content/clif-data-dictionary-1.0.0.md');
const markdownContent = fs.readFileSync(markdownPath, 'utf-8');

// Initialize markdown-it with custom options
const md = new MarkdownIt({
  html: true,
  breaks: true,
  linkify: true,
  typographer: true
});

// Custom renderer for headings to remove [Anchor] links and add styling
md.renderer.rules.heading_open = function(tokens, idx, options, env, renderer) {
  const token = tokens[idx];
  const level = token.tag.substring(1); // Extract number from h1, h2, etc.
  
  // Get the text content from the next token
  let headingText = '';
  if (tokens[idx + 1] && tokens[idx + 1].type === 'inline') {
    headingText = tokens[idx + 1].content;
  }
  
  // Remove [Anchor] links from heading text
  const cleanText = headingText.replace(/\s*\[Anchor\]\s*\(.*?\)\s*$/, '');
  
  // Create a clean ID from the text
  const id = cleanText.toLowerCase().replace(/[^a-z0-9]+/g, '-');
  
  // Add classes based on heading level
  const levelClasses = {
    '1': 'text-3xl font-bold mb-6 mt-8 text-clif-burgundy scroll-mt-20',
    '2': 'text-2xl font-semibold mb-4 mt-6 text-gray-900 scroll-mt-20 border-b border-gray-200 pb-2',
    '3': 'text-xl font-semibold mb-3 mt-4 text-gray-800 scroll-mt-20',
    '4': 'text-lg font-medium mb-2 mt-3 text-gray-700 scroll-mt-20',
  };
  
  return `<h${level} id="${id}" class="${levelClasses[level] || ''}">`;
};

// Custom renderer for inline content to clean up [Anchor] links
md.renderer.rules.link_open = function(tokens, idx, options, env, renderer) {
  const token = tokens[idx];
  const href = token.attrGet('href');
  
  // Skip rendering [Anchor] links
  if (tokens[idx + 1] && tokens[idx + 1].content === 'Anchor') {
    return '';
  }
  
  return `<a href="${href}">`;
};

md.renderer.rules.link_close = function(tokens, idx, options, env, renderer) {
  // Skip closing tag for [Anchor] links
  if (idx > 0 && tokens[idx - 1] && tokens[idx - 1].content === 'Anchor') {
    return '';
  }
  
  return '</a>';
};

// Custom renderer for inline tokens to remove [Anchor] text
md.renderer.rules.text = function(tokens, idx, options, env, renderer) {
  const token = tokens[idx];
  // Skip "Anchor" text nodes
  if (token.content === 'Anchor') {
    return '';
  }
  return md.utils.escapeHtml(token.content);
};

// Custom renderer for tables
md.renderer.rules.table_open = function() {
  return '<div class="table-wrapper overflow-x-auto rounded-lg shadow-sm border border-gray-200 my-6"><table class="min-w-full divide-y divide-gray-200">';
};

md.renderer.rules.table_close = function() {
  return '</table></div>';
};

md.renderer.rules.thead_open = function() {
  return '<thead class="bg-gray-50 sticky top-0 z-10">';
};

md.renderer.rules.tbody_open = function() {
  return '<tbody class="bg-white divide-y divide-gray-200">';
};

md.renderer.rules.th_open = function(tokens, idx) {
  const token = tokens[idx];
  const align = token.attrGet('style');
  let alignClass = '';
  
  if (align && align.includes('text-align:center')) alignClass = 'text-center';
  else if (align && align.includes('text-align:right')) alignClass = 'text-right';
  
  return `<th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider bg-gray-50 ${alignClass}">`;
};

md.renderer.rules.td_open = function(tokens, idx) {
  const token = tokens[idx];
  const align = token.attrGet('style');
  let alignClass = '';
  
  if (align && align.includes('text-align:center')) alignClass = 'text-center';
  else if (align && align.includes('text-align:right')) alignClass = 'text-right';
  
  return `<td class="px-6 py-4 text-sm text-gray-900 ${alignClass}">`;
};

// Convert markdown to HTML
let processedHtml = md.render(markdownContent);

// Fix image paths
processedHtml = processedHtml.replace(
  /https:\/\/clif-consortium\.github\.io\/website\/images\//g,
  '/images/'
);

// Replace deprecated badge image with styled version
processedHtml = processedHtml.replace(
  /!\[\]\(https:\/\/img\.shields\.io\/badge\/Status-Deprecated-lightgrey\.png\)/g,
  '<span class="badge-deprecated">⚠️ DEPRECATED</span>'
);

// Also replace img tags for deprecated badge (in case they were already converted)
processedHtml = processedHtml.replace(
  /<img[^>]*src="https:\/\/img\.shields\.io\/badge\/Status-Deprecated-lightgrey\.png"[^>]*>/g,
  '<span class="badge-deprecated">⚠️ DEPRECATED</span>'
);

// Replace any remaining deprecated badges
processedHtml = processedHtml.replace(
  /<img[^>]*alt="[^"]*Deprecated[^"]*"[^>]*>/g,
  '<span class="badge-deprecated">⚠️ DEPRECATED</span>'
);

// Extract data tables for sidebar (all tables in 1.0.0 are part of the deprecated version)
const dataTableNames = [
  'Patient_encounters', 'Patient_demographics', 'Limited_identifiers', 
  'Encounter_demographics_disposition', 'ADT', 'Vitals', 'Labs', 
  'Microbiology', 'Respiratory_support', 'Medication_admin_continuous', 
  'Dialysis', 'Position'
];
---

<BaseLayout
  title="CLIF-1.0.0 Data Dictionary (Deprecated)"
  description="Original version of the Common Longitudinal ICU data Format - Now Deprecated"
>
  <div class="container mx-auto px-6 py-12">
    <div class="max-w-7xl mx-auto">
      <!-- Deprecated Warning -->
      <div class="bg-yellow-50 border-2 border-yellow-200 p-4 rounded-lg mb-8 shadow-sm">
        <p class="text-lg font-semibold text-yellow-800 m-0">
          ⚠️ This version is deprecated. Please use <a
            href="/data-dictionary"
            class="text-clif-burgundy hover:underline">CLIF v2.0.0</a
          > for current implementations.
        </p>
      </div>

      <!-- Header -->
      <header class="mb-8 bg-gradient-to-r from-gray-100 to-gray-200 rounded-xl p-6 shadow-sm">
        <h1 class="text-4xl font-bold mb-4 text-clif-burgundy">CLIF Data Dictionary 1.0.0</h1>
        <div class="flex items-center gap-4 mb-4">
          <Badge type="deprecated" size="large" />
          <span class="text-gray-600 font-medium">Legacy Version</span>
        </div>
        <p class="text-gray-700 leading-relaxed">
          The original CLIF specification that established the foundation for standardized 
          critical care data formats. This version has been superseded by v2.0.0.
        </p>
      </header>

      <!-- Table of Contents -->
      <nav class="toc-container bg-white rounded-lg shadow-sm border border-gray-200 p-4 mb-8 lg:hidden">
        <h2 class="text-lg font-semibold mb-3 text-gray-900">Quick Navigation</h2>
        <div class="space-y-1" id="mobile-toc">
          <!-- Will be populated by JavaScript -->
        </div>
      </nav>

      <!-- Main Content with Sidebar -->
      <div class="lg:grid lg:grid-cols-4 lg:gap-8">
        <!-- Desktop Table of Contents with Data Tables -->
        <aside class="hidden lg:block lg:col-span-1">
          <nav class="sticky top-20 bg-white rounded-lg border p-4 max-h-[calc(100vh-6rem)] overflow-y-auto">
            <h2 class="text-lg font-semibold mb-4 text-gray-900">Data Tables</h2>
            
            <!-- Search for tables only -->
            <div class="mb-4">
              <input 
                type="text" 
                id="table-search"
                placeholder="Search tables..."
                class="w-full px-3 py-2 text-sm border rounded-md focus:outline-none focus:ring-2 focus:ring-gray-500"
              />
            </div>

            <!-- Deprecated Tables -->
            <div class="mb-4">
              <button 
                id="tables-toggle"
                class="w-full flex items-center justify-between p-2 text-left rounded hover:bg-gray-50"
                aria-expanded="true"
              >
                <div class="flex items-center gap-2">
                  <svg class="w-4 h-4 transform transition-transform" id="tables-chevron" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                  </svg>
                  <span class="font-medium">Deprecated Tables (v1.0.0)</span>
                  <span class="text-xs bg-gray-100 text-gray-600 px-2 py-1 rounded-full">{dataTableNames.length}</span>
                </div>
              </button>
              <div id="deprecated-tables" class="mt-2 pl-6 space-y-1">
                {dataTableNames.map(tableName => (
                  <a 
                    href={`#${tableName.toLowerCase().replace(/[^a-z0-9]+/g, '-')}`}
                    class="table-link block py-1 px-2 text-sm text-gray-600 hover:text-gray-900 hover:bg-gray-50 rounded"
                    data-table-name={tableName.toLowerCase()}
                  >
                    {tableName.replace(/_/g, ' ')}
                  </a>
                ))}
              </div>
            </div>

            <!-- Migration Notice -->
            <div class="mt-6 pt-4 border-t border-gray-200">
              <div class="p-3 bg-yellow-50 rounded-lg">
                <p class="text-sm text-yellow-800 font-medium mb-2">⚠️ Deprecated Version</p>
                <a href="/data-dictionary" class="text-sm text-clif-burgundy hover:underline">
                  → View current version (v2.0.0)
                </a>
              </div>
            </div>
          </nav>
        </aside>

        <!-- Article Content -->
        <article class="lg:col-span-3">
          <div 
            class="markdown-content prose prose-lg max-w-none"
            set:html={processedHtml}
          />

          <div class="mt-12 flex justify-between items-center">
            <a href="/data-dictionary/change-log" class="text-clif-burgundy hover:underline no-underline">
              ← View Change Log
            </a>
            <a
              href="/data-dictionary"
              class="bg-clif-burgundy hover:bg-clif-burgundy-dark text-white font-medium py-2 px-4 rounded no-underline shadow-sm hover:shadow-md transition-all duration-200"
            >
              View Current Version (v2.0.0) →
            </a>
          </div>
        </article>
      </div>
    </div>
  </div>

  <style>
    /* Enhanced markdown content styling */
    .markdown-content {
      @apply text-gray-800;
    }

    /* Table wrapper styling */
    .table-wrapper {
      @apply -mx-4 px-4 md:mx-0 md:px-0;
    }

    /* Enhanced table styling */
    .markdown-content table {
      @apply w-full;
    }

    .markdown-content tbody tr {
      @apply transition-colors duration-150;
    }

    .markdown-content tbody tr:nth-child(even) {
      @apply bg-gray-50/50;
    }

    .markdown-content tbody tr:hover {
      @apply bg-yellow-50/30;
    }

    /* Code styling improvements */
    .markdown-content code {
      @apply bg-gray-100 px-2 py-1 rounded text-sm font-mono text-gray-800 border border-gray-200;
    }

    .markdown-content pre {
      @apply bg-gray-900 text-gray-100 p-4 rounded-lg overflow-x-auto mb-4 shadow-md border border-gray-800;
    }

    .markdown-content pre code {
      @apply bg-transparent p-0 border-0;
    }

    /* Table code styling */
    .markdown-content td code {
      @apply text-xs px-1.5 py-0.5;
    }

    /* Link styling */
    .markdown-content a {
      @apply text-clif-burgundy hover:text-clif-burgundy-dark underline decoration-1 underline-offset-2 transition-colors duration-200;
    }

    /* List styling */
    .markdown-content ul {
      @apply list-disc list-outside mb-4 ml-6 space-y-1;
    }

    .markdown-content ol {
      @apply list-decimal list-outside mb-4 ml-6 space-y-1;
    }

    .markdown-content li {
      @apply mb-2 leading-relaxed;
    }

    /* Nested lists */
    .markdown-content li ul,
    .markdown-content li ol {
      @apply mt-2 mb-2;
    }

    /* Paragraph spacing */
    .markdown-content p {
      @apply mb-4 leading-relaxed;
    }

    /* Images */
    .markdown-content img {
      @apply max-w-full h-auto mx-auto my-6 rounded-lg shadow-lg border border-gray-200;
    }

    /* Blockquotes */
    .markdown-content blockquote {
      @apply border-l-4 border-yellow-500/50 pl-4 italic my-4 text-gray-700 bg-yellow-50/20 py-2 pr-4 rounded-r;
    }

    /* Strong text */
    .markdown-content strong {
      @apply font-semibold text-gray-900;
    }

    /* Badge replacement */
    .badge-deprecated {
      @apply inline-flex items-center gap-1 px-3 py-1 text-sm font-bold rounded-full shadow-sm;
      @apply bg-gradient-to-r from-gray-400 to-gray-500 text-gray-900 border border-gray-600;
    }

    /* Table links */
    .table-link {
      @apply block py-1 px-2 text-sm text-gray-600 hover:text-gray-900 hover:bg-gray-50 rounded;
    }

    .table-link.active {
      @apply text-gray-900 bg-gray-100 font-medium;
    }

    /* Table of Contents styling */
    .toc-link {
      @apply block py-1 px-3 text-sm text-gray-600 hover:text-clif-burgundy hover:bg-gray-50 rounded transition-colors duration-150;
    }

    .toc-link.active {
      @apply text-clif-burgundy bg-clif-burgundy/5 font-medium;
    }

    .toc-link-h2 {
      @apply pl-3;
    }

    .toc-link-h3 {
      @apply pl-6 text-xs;
    }

    .toc-link-h4 {
      @apply pl-9 text-xs;
    }

    /* Example sections styling */
    .markdown-content h4:has(+ table),
    .markdown-content p:has(strong:only-child) {
      @apply mt-4 mb-2;
    }

    /* Note sections */
    .markdown-content p > em:first-child {
      @apply text-gray-600;
    }

    /* Responsive improvements */
    @media (max-width: 768px) {
      .markdown-content table {
        @apply text-xs;
      }
      
      .markdown-content th,
      .markdown-content td {
        @apply px-3 py-2;
      }

      .markdown-content h1 {
        @apply text-2xl;
      }

      .markdown-content h2 {
        @apply text-xl;
      }

      .markdown-content h3 {
        @apply text-lg;
      }
    }

    /* Print styles */
    @media print {
      .toc-container,
      .toc-sidebar {
        @apply hidden;
      }

      .markdown-content table {
        @apply break-inside-avoid text-xs;
      }
      
      .markdown-content h1,
      .markdown-content h2,
      .markdown-content h3 {
        @apply break-after-avoid;
      }

      .table-wrapper {
        @apply shadow-none border-0;
      }

      .bg-yellow-50 {
        @apply bg-transparent border-gray-400;
      }
    }

    /* Smooth scroll behavior */
    html {
      scroll-behavior: smooth;
    }
  </style>

  <script>
    document.addEventListener('DOMContentLoaded', () => {
      // Simple sidebar functionality
      const tablesToggle = document.getElementById('tables-toggle');
      const deprecatedTables = document.getElementById('deprecated-tables');
      const tablesChevron = document.getElementById('tables-chevron');
      const searchInput = document.getElementById('table-search');
      const tableLinks = document.querySelectorAll('.table-link');

      // Toggle section
      function toggleSection(section, chevron, button) {
        const isExpanded = button.getAttribute('aria-expanded') === 'true';
        button.setAttribute('aria-expanded', !isExpanded);
        
        if (isExpanded) {
          section.style.display = 'none';
          chevron.style.transform = 'rotate(-90deg)';
        } else {
          section.style.display = 'block';
          chevron.style.transform = 'rotate(0deg)';
        }
      }

      tablesToggle?.addEventListener('click', () => {
        toggleSection(deprecatedTables, tablesChevron, tablesToggle);
      });

      // Simple search
      searchInput?.addEventListener('input', (e) => {
        const searchTerm = e.target.value.toLowerCase();
        
        tableLinks.forEach(link => {
          const tableName = link.getAttribute('data-table-name');
          if (tableName && tableName.includes(searchTerm)) {
            link.style.display = 'block';
          } else {
            link.style.display = 'none';
          }
        });
      });

      // Smooth scrolling and active link highlighting
      const observerOptions = {
        rootMargin: '-20% 0px -70% 0px',
        threshold: 0
      };

      const observer = new IntersectionObserver((entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            const id = entry.target.id;
            tableLinks.forEach((link) => {
              if (link.getAttribute('href') === `#${id}`) {
                link.classList.add('active');
              } else {
                link.classList.remove('active');
              }
            });
          }
        });
      }, observerOptions);

      // Observe all headings for active highlighting
      const headings = document.querySelectorAll('.markdown-content h1, .markdown-content h2, .markdown-content h3');
      headings.forEach((heading) => {
        if (heading.id) {
          observer.observe(heading);
        }
      });

      // Smooth scrolling
      tableLinks.forEach(link => {
        link.addEventListener('click', (e) => {
          e.preventDefault();
          const targetId = link.getAttribute('href').substring(1);
          const targetElement = document.getElementById(targetId);
          
          if (targetElement) {
            targetElement.scrollIntoView({
              behavior: 'smooth',
              block: 'start'
            });
          }
        });
      });

      // Add copy button to code blocks
      const codeBlocks = document.querySelectorAll('pre code');
      codeBlocks.forEach((codeBlock) => {
        const wrapper = codeBlock.parentElement;
        wrapper.style.position = 'relative';
        
        const copyButton = document.createElement('button');
        copyButton.className = 'absolute top-2 right-2 px-2 py-1 text-xs bg-gray-700 hover:bg-gray-600 text-gray-300 rounded transition-colors duration-150';
        copyButton.textContent = 'Copy';
        
        copyButton.addEventListener('click', async () => {
          try {
            await navigator.clipboard.writeText(codeBlock.textContent);
            copyButton.textContent = 'Copied!';
            setTimeout(() => {
              copyButton.textContent = 'Copy';
            }, 2000);
          } catch (err) {
            console.error('Failed to copy:', err);
          }
        });
        
        wrapper.appendChild(copyButton);
      });
    });
  </script>
</BaseLayout>