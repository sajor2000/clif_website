---
import BaseLayout from '../../layouts/BaseLayout.astro';
import Badge from '../../components/Badge.astro';
import OptimizedImage from '../../components/OptimizedImage.astro';
import InteractiveERDOptimized from '../../components/InteractiveERDOptimized.astro';

// Define all Beta tables data
const betaTables = [
  {
    id: 'adt',
    name: 'ADT',
    description:
      "The admission, discharge, and transfer (ADT) table is a start-stop longitudinal dataset that contains information about each patient's movement within the hospital. It also has a hospital_id field to distinguish between different hospitals within a health system.",
    fields: [
      {
        name: 'hospitalization_id',
        type: 'VARCHAR',
        description: 'ID variable for each patient encounter',
        restrictions: 'No restriction',
      },
      {
        name: 'hospital_id',
        type: 'VARCHAR',
        description: 'Assign a unique ID to each hospital within a healthsystem',
        restrictions: 'No restriction',
      },
      {
        name: 'hospital_type',
        type: 'VARCHAR',
        description: 'Maps hospital_id to a standardized list of hospital types',
        values: ['academic', 'community'],
      },
      {
        name: 'in_dttm',
        type: 'DATETIME',
        description:
          'Start date and time at a particular location. All datetime variables must be timezone-aware and set to UTC.',
        restrictions: 'Datetime format should be YYYY-MM-DD HH:MM:SS+00:00 (UTC)',
      },
      {
        name: 'out_dttm',
        type: 'DATETIME',
        description:
          'End date and time at a particular location. All datetime variables must be timezone-aware and set to UTC.',
        restrictions: 'Datetime format should be YYYY-MM-DD HH:MM:SS+00:00 (UTC)',
      },
      {
        name: 'location_name',
        type: 'VARCHAR',
        description:
          'Location of the patient inside the hospital. This field is used to store the patient location from the source data. It is not used for analysis.',
        restrictions: 'No restriction',
      },
      {
        name: 'location_category',
        type: 'VARCHAR',
        description: 'Maps location_name to a standardized list of ADT location categories',
        values: [
          'ed',
          'ward',
          'stepdown',
          'icu',
          'procedural',
          'l&d',
          'hospice',
          'psych',
          'rehab',
          'radiology',
          'dialysis',
          'other',
        ],
      },
    ],
    notes: [
      'ADT represents the patient\'s physical location, NOT the patient "status".',
      'Procedural areas and operating rooms should be mapped to "Procedural". Pre/Intra/Post-procedural/OR EHR data (such as anesthesia flowsheet records from Labs, Vitals, Scores, Respiratory Support) are not currently represented in CLIF.',
    ],
    example: `| hospitalization_id | hospital_id | hospital_type | in_dttm | out_dttm | location_name | location_category |
|---|---|---|---|---|---|---|
| 20010012 | ABC | academic | 2024-12-01 10:00:00+00:00 | 2024-12-01 14:00:00+00:00 | B06F | icu |
| 20010012 | ABC | academic | 2024-12-01 14:30:00+00:00 | 2024-12-02 08:00:00+00:00 | B78D | ward |`,
  },
  {
    id: 'hospitalization',
    name: 'Hospitalization',
    description:
      'The hospitalization table contains information about each hospitalization event. Each row in this table represents a unique hospitalization event for a patient. This table is inspired by the visit_occurance OMOP table but is specific to inpatient hospitalizations (including those that begin in the emergency room).',
    fields: [
      {
        name: 'patient_id',
        type: 'VARCHAR',
        description: 'Unique identifier for each patient, linking to the patient table',
        restrictions: 'No restriction',
      },
      {
        name: 'hospitalization_id',
        type: 'VARCHAR',
        description: 'Unique identifier for each hospitalization encounter. Each hospitalization_id represents a unique stay in the hospital',
        restrictions: 'No restriction',
      },
      {
        name: 'hospitalization_joined_id',
        type: 'VARCHAR',
        description: 'Unique identifier for each continuous inpatient stay in a health system which may span different hospitals (Optional)',
        restrictions: 'No restriction',
      },
      {
        name: 'admission_dttm',
        type: 'DATETIME',
        description: 'Date and time the patient is admitted to the hospital. All datetime variables must be timezone-aware and set to UTC.',
        restrictions: 'Datetime format should be YYYY-MM-DD HH:MM:SS+00:00 (UTC)',
      },
      {
        name: 'discharge_dttm',
        type: 'DATETIME',
        description: 'Date and time the patient is discharged from the hospital. All datetime variables must be timezone-aware and set to UTC.',
        restrictions: 'Datetime format should be YYYY-MM-DD HH:MM:SS+00:00 (UTC)',
      },
      {
        name: 'age_at_admission',
        type: 'INT',
        description: 'Age of the patient at the time of admission, in years',
        restrictions: 'No restriction',
      },
      {
        name: 'admission_type_name',
        type: 'VARCHAR',
        description: 'Type of inpatient admission. Original string from the source data',
        restrictions: 'e.g. "Direct admission", "Transfer", "Pre-op surgical"',
      },
      {
        name: 'admission_type_category',
        type: 'VARCHAR',
        description: 'Admission disposition mapped to mCIDE categories',
        restrictions: 'Under-development',
      },
      {
        name: 'discharge_name',
        type: 'VARCHAR',
        description: 'Original discharge disposition name string recorded in the raw data',
        restrictions: 'No restriction, e.g. "home"',
      },
      {
        name: 'discharge_category',
        type: 'VARCHAR',
        description: 'Maps discharge_name to a standardized list of discharge categories',
        values: ['Home', 'Skilled Nursing Facility (SNF)', 'Expired', 'Acute Inpatient Rehab Facility', 'Hospice', 'Long Term Care Hospital (LTACH)', 'Acute Care Hospital', 'Group Home', 'Chemical Dependency', 'Against Medical Advice (AMA)', 'Assisted Living', 'Still Admitted', 'Missing', 'Other', 'Psychiatric Hospital', 'Shelter', 'Jail'],
      },
      {
        name: 'zipcode_nine_digit',
        type: 'VARCHAR',
        description: 'Patient\'s 9 digit zip code, used to link with other indices such as ADI and SVI',
        restrictions: 'No restriction',
      },
      {
        name: 'zipcode_five_digit',
        type: 'VARCHAR',
        description: 'Patient\'s 5 digit zip code, used to link with other indices such as ADI and SVI',
        restrictions: 'No restriction',
      },
      {
        name: 'census_block_code',
        type: 'VARCHAR',
        description: '15 digit FIPS code',
        restrictions: 'No restriction',
      },
      {
        name: 'census_block_group_code',
        type: 'VARCHAR',
        description: '12 digit FIPS code',
        restrictions: 'No restriction',
      },
      {
        name: 'census_tract',
        type: 'VARCHAR',
        description: '11 digit FIPS code',
        restrictions: 'No restriction',
      },
      {
        name: 'state_code',
        type: 'VARCHAR',
        description: '2 digit FIPS code',
        restrictions: 'No restriction',
      },
      {
        name: 'county_code',
        type: 'VARCHAR',
        description: '5 digit FIPS code',
        restrictions: 'No restriction',
      },
    ],
    notes: [
      'If a patient is discharged to Home/Hospice, then discharge_category == Hospice.',
      'The geographical indicators (zipcode_nine_digit, zipcode_five_digit, census_block_code, census_block_group_code, census_tract, state_code, county_code) should be added if they are available in your source dataset. zipcode_nine_digit is preferred over zipcode_five_digit, and census_block_code is ideal for census based indicators. The choice of geographical indicators may differ depending on the project.',
      'If a patient is transferred between different hospitals within a health system, a new hospitalization_id should be created',
      'If a patient is initially seen in an ER in hospital A and then admitted to inpatient status in hospital B, one hospitalization_id should be created for data from both stays',
      'A hospitalization_joined_id can also be created from a CLIF table from contiguous hospitalization_ids',
    ],
  },
  {
    id: 'labs',
    name: 'Labs',
    description:
      'The labs table is a long form (one lab result per row) longitudinal table.',
    fields: [
      {
        name: 'hospitalization_id',
        type: 'VARCHAR',
        description: 'ID variable for each patient encounter.',
        restrictions: 'No restriction',
      },
      {
        name: 'lab_order_dttm',
        type: 'DATETIME',
        description: 'Date and time when the lab is ordered. All datetime variables must be timezone-aware and set to UTC.',
        restrictions: 'Datetime format should be YYYY-MM-DD HH:MM:SS+00:00 (UTC)',
      },
      {
        name: 'lab_collect_dttm',
        type: 'DATETIME',
        description: 'Date and time when the specimen is collected. All datetime variables must be timezone-aware and set to UTC.',
        restrictions: 'Datetime format should be YYYY-MM-DD HH:MM:SS+00:00 (UTC)',
      },
      {
        name: 'lab_result_dttm',
        type: 'DATETIME',
        description: 'Date and time when the lab results are available. All datetime variables must be timezone-aware and set to UTC.',
        restrictions: 'Datetime format should be YYYY-MM-DD HH:MM:SS+00:00 (UTC)',
      },
      {
        name: 'lab_order_name',
        type: 'VARCHAR',
        description: 'Procedure name for the lab, e.g. "Complete blood count w/ diff"',
        restrictions: 'No restriction',
      },
      {
        name: 'lab_order_category',
        type: 'VARCHAR',
        description: 'Maps lab_order_name to standardized list of common lab order names, e.g. "CBC"',
        restrictions: 'List of lab order categories in CLIF',
      },
      {
        name: 'lab_name',
        type: 'VARCHAR',
        description: 'Original lab component as recorded in the raw data, e.g. "AST (SGOT)".',
        restrictions: 'No restriction',
      },
      {
        name: 'lab_category',
        type: 'VARCHAR',
        description: 'Maps lab_name to a minimum set of standardized labs identified by the CLIF consortium as minimum necessary labs for the study of critical illness.',
        restrictions: 'List of lab categories in CLIF',
      },
      {
        name: 'lab_value',
        type: 'VARCHAR',
        description: 'Recorded value corresponding to a lab. Lab values are often strings that can contain non-numeric results (e.g. "> upper limit of detection").',
        restrictions: 'No restriction',
      },
      {
        name: 'lab_value_numeric',
        type: 'DOUBLE',
        description: 'Parse out numeric part of the lab_value variable (optional).',
        restrictions: 'Numeric',
      },
      {
        name: 'reference_unit',
        type: 'VARCHAR',
        description: 'Unit of measurement for that lab.',
        restrictions: 'Permissible reference values for each lab_category',
      },
    ],
    notes: [
      'The lab_value field can contain non-numeric text, so a separate lab_value_numeric field is provided for numeric analyses.',
    ],
  },
  {
    id: 'medication_admin_continuous',
    name: 'Medication Admin Continuous',
    description:
      'The medication_admin_continuous table contains information about continuous IV drips. This includes common medications like Norepinephrine, Epinephrine, Vasopressin, and Phenylephrine among others.',
    fields: [
      {
        name: 'hospitalization_id',
        type: 'VARCHAR',
        description: 'ID variable for each patient encounter',
        restrictions: 'No restriction',
      },
      {
        name: 'med_admin_dttm',
        type: 'DATETIME',
        description: 'Date and time when the medication is administered. All datetime variables must be timezone-aware and set to UTC.',
        restrictions: 'Datetime format should be YYYY-MM-DD HH:MM:SS+00:00 (UTC)',
      },
      {
        name: 'med_name',
        type: 'VARCHAR',
        description: 'Name of the medication',
        restrictions: 'No restriction',
      },
      {
        name: 'med_category',
        type: 'VARCHAR',
        description: 'Maps med_name to mCIDE standardized categories',
        values: ['adrenergic_agents', 'antibiotics', 'antiarrhythmics', 'anticoagulants', 'antiepileptics', 'electrolytes', 'insulin', 'paralytics', 'proton_pump_inhibitors', 'sedatives', 'steroids', 'other'],
      },
      {
        name: 'med_value',
        type: 'DOUBLE',
        description: 'Rate of the medication administration (numeric)',
        restrictions: 'Numeric',
      },
      {
        name: 'med_unit',
        type: 'VARCHAR',
        description: 'Unit of measurement for the medication',
        restrictions: 'No restriction',
      },
      {
        name: 'med_rate',
        type: 'DOUBLE',
        description: 'Standardized infusion rate (when possible to standardize across institutions)',
        restrictions: 'Numeric',
      },
      {
        name: 'med_rate_unit',
        type: 'VARCHAR',
        description: 'Standardized unit for the infusion rate',
        restrictions: 'No restriction',
      },
    ],
  },
  {
    id: 'patient',
    name: 'Patient',
    description:
      'The patient table contains static demographic information about patients.',
    fields: [
      {
        name: 'patient_id',
        type: 'VARCHAR',
        description: 'Unique identifier for each patient',
        restrictions: 'No restriction',
      },
      {
        name: 'sex',
        type: 'VARCHAR',
        description: 'Biological sex of the patient',
        values: ['Male', 'Female', 'Unknown'],
      },
      {
        name: 'race_name',
        type: 'VARCHAR',
        description: 'Original race string from source data',
        restrictions: 'No restriction',
      },
      {
        name: 'race_category',
        type: 'VARCHAR',
        description: 'Maps race_name to standardized race categories',
        values: ['American Indian or Alaska Native', 'Asian', 'Black or African American', 'Hispanic or Latino', 'Native Hawaiian or Other Pacific Islander', 'White', 'Other', 'Unknown'],
      },
      {
        name: 'ethnicity_name',
        type: 'VARCHAR',
        description: 'Original ethnicity string from source data',
        restrictions: 'No restriction',
      },
      {
        name: 'ethnicity_category',
        type: 'VARCHAR',
        description: 'Maps ethnicity_name to standardized categories',
        values: ['Hispanic or Latino', 'Not Hispanic or Latino', 'Unknown'],
      },
    ],
  },
  {
    id: 'patient_assessments',
    name: 'Patient Assessments',
    description:
      'The patient_assessments table captures various clinical assessment scores such as Glasgow Coma Scale, RASS, CAM-ICU, and pain scores.',
    fields: [
      {
        name: 'hospitalization_id',
        type: 'VARCHAR',
        description: 'ID variable for each patient encounter',
        restrictions: 'No restriction',
      },
      {
        name: 'assessment_dttm',
        type: 'DATETIME',
        description: 'Date and time when the assessment is performed. All datetime variables must be timezone-aware and set to UTC.',
        restrictions: 'Datetime format should be YYYY-MM-DD HH:MM:SS+00:00 (UTC)',
      },
      {
        name: 'assessment_name',
        type: 'VARCHAR',
        description: 'Name of the assessment',
        restrictions: 'No restriction',
      },
      {
        name: 'assessment_category',
        type: 'VARCHAR',
        description: 'Maps assessment_name to standardized categories',
        values: ['gcs_total', 'gcs_eye', 'gcs_verbal', 'gcs_motor', 'rass', 'cam_icu', 'pain'],
      },
      {
        name: 'assessment_value',
        type: 'VARCHAR',
        description: 'Value of the assessment',
        restrictions: 'No restriction',
      },
      {
        name: 'assessment_numeric',
        type: 'DOUBLE',
        description: 'Numeric value of the assessment (when applicable)',
        restrictions: 'Numeric',
      },
    ],
  },
  {
    id: 'position',
    name: 'Position',
    description:
      'The position table tracks patient positioning data, particularly important for prone positioning in ARDS management.',
    fields: [
      {
        name: 'hospitalization_id',
        type: 'VARCHAR',
        description: 'ID variable for each patient encounter',
        restrictions: 'No restriction',
      },
      {
        name: 'position_dttm',
        type: 'DATETIME',
        description: 'Date and time when the position is recorded. All datetime variables must be timezone-aware and set to UTC.',
        restrictions: 'Datetime format should be YYYY-MM-DD HH:MM:SS+00:00 (UTC)',
      },
      {
        name: 'position_name',
        type: 'VARCHAR',
        description: 'Original position name from source data',
        restrictions: 'No restriction',
      },
      {
        name: 'position_category',
        type: 'VARCHAR',
        description: 'Maps position_name to standardized categories',
        values: ['supine', 'prone', 'lateral_right', 'lateral_left', 'sitting', 'standing', 'other'],
      },
    ],
  },
  {
    id: 'respiratory_support',
    name: 'Respiratory Support',
    description:
      'The respiratory_support table captures longitudinal data about various forms of respiratory support including mechanical ventilation, NIV, and oxygen therapy.',
    fields: [
      {
        name: 'hospitalization_id',
        type: 'VARCHAR',
        description: 'ID variable for each patient encounter',
        restrictions: 'No restriction',
      },
      {
        name: 'recorded_dttm',
        type: 'DATETIME',
        description: 'Date and time when the respiratory support is recorded. All datetime variables must be timezone-aware and set to UTC.',
        restrictions: 'Datetime format should be YYYY-MM-DD HH:MM:SS+00:00 (UTC)',
      },
      {
        name: 'device_name',
        type: 'VARCHAR',
        description: 'Original device name from source data',
        restrictions: 'No restriction',
      },
      {
        name: 'device_category',
        type: 'VARCHAR',
        description: 'Maps device_name to standardized categories',
        values: ['invasive_vent', 'niv_bpap', 'niv_cpap', 'hfnc', 'nasal_cannula', 'face_mask', 'non_rebreather', 'room_air', 'other'],
      },
      {
        name: 'mode_name',
        type: 'VARCHAR',
        description: 'Ventilator mode name from source data',
        restrictions: 'No restriction',
      },
      {
        name: 'mode_category',
        type: 'VARCHAR',
        description: 'Maps mode_name to standardized categories',
        values: ['volume_control', 'pressure_control', 'pressure_support', 'simv', 'spontaneous', 'other'],
      },
      {
        name: 'fiO2_set',
        type: 'DOUBLE',
        description: 'Set fraction of inspired oxygen (0-1)',
        restrictions: 'Numeric between 0 and 1',
      },
      {
        name: 'peep_set',
        type: 'DOUBLE',
        description: 'Set positive end-expiratory pressure in cmH2O',
        restrictions: 'Numeric',
      },
      {
        name: 'tidal_volume_set',
        type: 'DOUBLE',
        description: 'Set tidal volume in mL',
        restrictions: 'Numeric',
      },
      {
        name: 'respiratory_rate_set',
        type: 'DOUBLE',
        description: 'Set respiratory rate in breaths per minute',
        restrictions: 'Numeric',
      },
      {
        name: 'pressure_support',
        type: 'DOUBLE',
        description: 'Pressure support level in cmH2O',
        restrictions: 'Numeric',
      },
      {
        name: 'flow_rate',
        type: 'DOUBLE',
        description: 'Flow rate in L/min (for oxygen devices)',
        restrictions: 'Numeric',
      },
    ],
  },
  {
    id: 'vitals',
    name: 'Vitals',
    description:
      'The vitals table contains longitudinal vital sign measurements.',
    fields: [
      {
        name: 'hospitalization_id',
        type: 'VARCHAR',
        description: 'ID variable for each patient encounter',
        restrictions: 'No restriction',
      },
      {
        name: 'recorded_dttm',
        type: 'DATETIME',
        description: 'Date and time when the vital sign is recorded. All datetime variables must be timezone-aware and set to UTC.',
        restrictions: 'Datetime format should be YYYY-MM-DD HH:MM:SS+00:00 (UTC)',
      },
      {
        name: 'vital_name',
        type: 'VARCHAR',
        description: 'Original vital sign name from source data',
        restrictions: 'No restriction',
      },
      {
        name: 'vital_category',
        type: 'VARCHAR',
        description: 'Maps vital_name to standardized categories',
        values: ['heart_rate', 'sbp', 'dbp', 'map', 'respiratory_rate', 'spo2', 'temperature', 'weight', 'height'],
      },
      {
        name: 'vital_value',
        type: 'DOUBLE',
        description: 'Numeric value of the vital sign',
        restrictions: 'Numeric',
      },
      {
        name: 'vital_unit',
        type: 'VARCHAR',
        description: 'Unit of measurement',
        restrictions: 'No restriction',
      },
    ],
  },
];

// Define Concept tables
const conceptTables = [
  {
    id: 'code_status',
    name: 'Code Status',
    description: 'This table provides a longitudinal record of changes in a patient\'s code status during their hospitalization. It tracks the timeline and categorization of code status updates, facilitating the analysis of care preferences and decisions.',
    fields: [
      {
        name: 'hospitalization_id',
        type: 'VARCHAR',
        description: 'Unique identifier for each hospitalization encounter',
        restrictions: 'No restriction',
      },
      {
        name: 'recorded_dttm',
        type: 'DATETIME',
        description: 'Date and time when code status was documented',
        restrictions: 'Datetime format should be YYYY-MM-DD HH:MM:SS+00:00 (UTC)',
      },
      {
        name: 'code_status',
        type: 'VARCHAR',
        description: 'Patient\'s resuscitation preference',
        values: ['full_code', 'dnr', 'dnh', 'dni', 'comfort_care', 'other'],
      },
    ],
    notes: [
      'Code status changes are tracked longitudinally',
      'Facilitates analysis of care preferences and advance directives',
    ],
    example: `| hospitalization_id | recorded_dttm | code_status |
|---|---|---|
| 20010012 | 2024-12-01 10:00:00+00:00 | full_code |
| 20010012 | 2024-12-02 08:30:00+00:00 | dnr |`,
  },
  {
    id: 'crrt_therapy',
    name: 'CRRT Therapy',
    description: 'The crrt_therapy table captures Continuous Renal Replacement Therapy (CRRT) data, including different CRRT modalities, operational parameters, and fluid exchange details. The intermittent HD, peritoneal dialysis, PERT, and SLED tables are under development.',
    fields: [
      {
        name: 'hospitalization_id',
        type: 'VARCHAR',
        description: 'Unique identifier for each hospitalization encounter',
        restrictions: 'No restriction',
      },
      {
        name: 'therapy_start_dttm',
        type: 'DATETIME',
        description: 'Start date and time of CRRT therapy',
        restrictions: 'Datetime format should be YYYY-MM-DD HH:MM:SS+00:00 (UTC)',
      },
      {
        name: 'therapy_end_dttm',
        type: 'DATETIME',
        description: 'End date and time of CRRT therapy',
        restrictions: 'Datetime format should be YYYY-MM-DD HH:MM:SS+00:00 (UTC)',
      },
      {
        name: 'crrt_modality',
        type: 'VARCHAR',
        description: 'Type of CRRT modality used',
        values: ['cvvh', 'cvvhd', 'cvvhdf', 'scuf', 'other'],
      },
      {
        name: 'blood_flow_rate',
        type: 'DOUBLE',
        description: 'Blood flow rate in mL/min',
        restrictions: 'Numeric',
      },
      {
        name: 'dialysate_flow_rate',
        type: 'DOUBLE',
        description: 'Dialysate flow rate in mL/hr',
        restrictions: 'Numeric',
      },
    ],
    notes: [
      'Captures continuous renal replacement therapy parameters',
      'Intermittent HD, peritoneal dialysis, PERT, and SLED tables under development',
    ],
    example: `| hospitalization_id | therapy_start_dttm | therapy_end_dttm | crrt_modality | blood_flow_rate | dialysate_flow_rate |
|---|---|---|---|---|---|
| 20010012 | 2024-12-01 12:00:00+00:00 | 2024-12-02 12:00:00+00:00 | cvvhd | 200 | 2000 |`,
  },
  {
    id: 'ecmo_mcs',
    name: 'ECMO_MCS',
    description: 'The ECMO/MCS table is a wider longitudinal table that captures the start and stop times of ECMO/MCS support, the type of device used, and the work rate of the device.',
    fields: [
      {
        name: 'hospitalization_id',
        type: 'VARCHAR',
        description: 'Unique identifier for each hospitalization encounter',
        restrictions: 'No restriction',
      },
      {
        name: 'device_start_dttm',
        type: 'DATETIME',
        description: 'Start date and time of ECMO/MCS support',
        restrictions: 'Datetime format should be YYYY-MM-DD HH:MM:SS+00:00 (UTC)',
      },
      {
        name: 'device_end_dttm',
        type: 'DATETIME',
        description: 'End date and time of ECMO/MCS support',
        restrictions: 'Datetime format should be YYYY-MM-DD HH:MM:SS+00:00 (UTC)',
      },
      {
        name: 'device_type',
        type: 'VARCHAR',
        description: 'Type of mechanical circulatory support device',
        values: ['va_ecmo', 'vv_ecmo', 'iabp', 'impella', 'lvad', 'other'],
      },
      {
        name: 'device_flow_rate',
        type: 'DOUBLE',
        description: 'Device flow rate or work rate',
        restrictions: 'Numeric',
      },
    ],
    notes: [
      'Captures extracorporeal membrane oxygenation and mechanical circulatory support',
      'Tracks device parameters and support duration',
    ],
    example: `| hospitalization_id | device_start_dttm | device_end_dttm | device_type | device_flow_rate |
|---|---|---|---|---|
| 20010012 | 2024-12-01 14:00:00+00:00 | 2024-12-05 10:00:00+00:00 | vv_ecmo | 4.5 |`,
  },
  {
    id: 'hospital_diagnosis',
    name: 'Hospital Diagnosis',
    description: 'Record of all diagnoses associated with the hospitalization. Expect breaking changes to this table as we seek to align it with existing diagnosis ontologies',
    fields: [
      {
        name: 'hospitalization_id',
        type: 'VARCHAR',
        description: 'Unique identifier for each hospitalization encounter',
        restrictions: 'No restriction',
      },
      {
        name: 'diagnosis_dttm',
        type: 'DATETIME',
        description: 'Date and time when diagnosis was recorded',
        restrictions: 'Datetime format should be YYYY-MM-DD HH:MM:SS+00:00 (UTC)',
      },
      {
        name: 'diagnosis_code',
        type: 'VARCHAR',
        description: 'Diagnosis code (ICD-10, ICD-9, etc.)',
        restrictions: 'No restriction',
      },
      {
        name: 'diagnosis_description',
        type: 'VARCHAR',
        description: 'Text description of the diagnosis',
        restrictions: 'No restriction',
      },
      {
        name: 'diagnosis_type',
        type: 'VARCHAR',
        description: 'Type of diagnosis',
        values: ['primary', 'secondary', 'admission', 'discharge', 'working'],
      },
      {
        name: 'diagnosis_sequence',
        type: 'INTEGER',
        description: 'Sequence number for diagnosis ordering',
        restrictions: 'Numeric',
      },
    ],
    notes: [
      'Expect breaking changes as we align with existing diagnosis ontologies',
      'Supports multiple diagnosis coding systems',
    ],
    example: `| hospitalization_id | diagnosis_dttm | diagnosis_code | diagnosis_description | diagnosis_type | diagnosis_sequence |
|---|---|---|---|---|---|
| 20010012 | 2024-12-01 10:00:00+00:00 | J44.1 | COPD with acute exacerbation | primary | 1 |`,
  },
  {
    id: 'intake_output',
    name: 'Intake_Output',
    description: 'The intake_output table captures detailed data on patient fluid intake and output.',
    fields: [
      {
        name: 'hospitalization_id',
        type: 'VARCHAR',
        description: 'Unique identifier for each hospitalization encounter',
        restrictions: 'No restriction',
      },
      {
        name: 'recorded_dttm',
        type: 'DATETIME',
        description: 'Date and time when intake/output was recorded',
        restrictions: 'Datetime format should be YYYY-MM-DD HH:MM:SS+00:00 (UTC)',
      },
      {
        name: 'io_category',
        type: 'VARCHAR',
        description: 'Category of intake or output',
        values: ['intake', 'output'],
      },
      {
        name: 'io_type',
        type: 'VARCHAR',
        description: 'Specific type of intake or output',
        values: ['oral', 'iv', 'ng', 'urine', 'drain', 'other'],
      },
      {
        name: 'io_volume',
        type: 'DOUBLE',
        description: 'Volume in mL',
        restrictions: 'Numeric',
      },
      {
        name: 'io_description',
        type: 'VARCHAR',
        description: 'Description of the intake or output',
        restrictions: 'No restriction',
      },
    ],
    notes: [
      'Captures detailed fluid balance data',
      'Supports both intake and output tracking',
    ],
    example: `| hospitalization_id | recorded_dttm | io_category | io_type | io_volume | io_description |
|---|---|---|---|---|---|
| 20010012 | 2024-12-01 08:00:00+00:00 | intake | iv | 1000 | Normal saline |
| 20010012 | 2024-12-01 12:00:00+00:00 | output | urine | 800 | Urine output |`,
  },
  {
    id: 'invasive_hemodynamics',
    name: 'Invasive Hemodynamics',
    description: 'This table captures hemodynamic monitoring data from invasive devices such as arterial lines, central venous catheters, and pulmonary artery catheters.',
    fields: [
      {
        name: 'hospitalization_id',
        type: 'VARCHAR',
        description: 'Unique identifier for each hospitalization encounter',
        restrictions: 'No restriction',
      },
      {
        name: 'recorded_dttm',
        type: 'DATETIME',
        description: 'Date and time when measurement was recorded',
        restrictions: 'Datetime format should be YYYY-MM-DD HH:MM:SS+00:00 (UTC)',
      },
      {
        name: 'measurement_name',
        type: 'VARCHAR',
        description: 'Name of the hemodynamic measurement',
        restrictions: 'No restriction',
      },
      {
        name: 'measurement_category',
        type: 'VARCHAR',
        description: 'Category of hemodynamic measurement',
        values: ['arterial_pressure', 'central_venous_pressure', 'pulmonary_artery_pressure', 'cardiac_output', 'other'],
      },
      {
        name: 'measurement_value',
        type: 'DOUBLE',
        description: 'Numeric value of the measurement',
        restrictions: 'Numeric',
      },
      {
        name: 'measurement_unit',
        type: 'VARCHAR',
        description: 'Unit of measurement',
        restrictions: 'No restriction',
      },
    ],
    notes: [
      'Captures invasive hemodynamic monitoring data',
      'Includes arterial lines, central lines, and PA catheters',
    ],
    example: `| hospitalization_id | recorded_dttm | measurement_name | measurement_category | measurement_value | measurement_unit |
|---|---|---|---|---|---|
| 20010012 | 2024-12-01 10:15:00+00:00 | CVP | central_venous_pressure | 8 | mmHg |`,
  },
  {
    id: 'key_icu_orders',
    name: 'Key ICU orders',
    description: 'This table captures key orders placed in the ICU that impact patient care and outcomes.',
    fields: [
      {
        name: 'hospitalization_id',
        type: 'VARCHAR',
        description: 'Unique identifier for each hospitalization encounter',
        restrictions: 'No restriction',
      },
      {
        name: 'order_dttm',
        type: 'DATETIME',
        description: 'Date and time when order was placed',
        restrictions: 'Datetime format should be YYYY-MM-DD HH:MM:SS+00:00 (UTC)',
      },
      {
        name: 'order_category',
        type: 'VARCHAR',
        description: 'Category of the order',
        values: ['nutrition', 'activity', 'isolation', 'monitoring', 'therapy', 'other'],
      },
      {
        name: 'order_description',
        type: 'VARCHAR',
        description: 'Description of the order',
        restrictions: 'No restriction',
      },
      {
        name: 'order_status',
        type: 'VARCHAR',
        description: 'Status of the order',
        values: ['active', 'completed', 'discontinued', 'cancelled'],
      },
    ],
    notes: [
      'Captures key ICU orders impacting patient care',
      'Focuses on orders relevant to critical care outcomes',
    ],
    example: `| hospitalization_id | order_dttm | order_category | order_description | order_status |
|---|---|---|---|---|
| 20010012 | 2024-12-01 09:00:00+00:00 | nutrition | NPO for procedure | active |`,
  },
  {
    id: 'medication_admin_intermittent',
    name: 'Medication Admin Intermittent',
    description: 'This table contains information about medications given as single doses or intermittent administrations (not continuous infusions).',
    fields: [
      {
        name: 'hospitalization_id',
        type: 'VARCHAR',
        description: 'Unique identifier for each hospitalization encounter',
        restrictions: 'No restriction',
      },
      {
        name: 'admin_dttm',
        type: 'DATETIME',
        description: 'Date and time when medication was administered',
        restrictions: 'Datetime format should be YYYY-MM-DD HH:MM:SS+00:00 (UTC)',
      },
      {
        name: 'medication_name',
        type: 'VARCHAR',
        description: 'Name of the medication',
        restrictions: 'No restriction',
      },
      {
        name: 'medication_category',
        type: 'VARCHAR',
        description: 'Category of medication',
        values: ['antibiotic', 'analgesic', 'sedative', 'vasopressor', 'diuretic', 'other'],
      },
      {
        name: 'dose_value',
        type: 'DOUBLE',
        description: 'Dose amount',
        restrictions: 'Numeric',
      },
      {
        name: 'dose_unit',
        type: 'VARCHAR',
        description: 'Unit of the dose',
        restrictions: 'No restriction',
      },
      {
        name: 'route',
        type: 'VARCHAR',
        description: 'Route of administration',
        values: ['iv', 'po', 'im', 'sc', 'ng', 'pr', 'other'],
      },
    ],
    notes: [
      'Covers single doses and intermittent administrations',
      'Excludes continuous infusions (see medication_admin_continuous)',
    ],
    example: `| hospitalization_id | admin_dttm | medication_name | medication_category | dose_value | dose_unit | route |
|---|---|---|---|---|---|---|
| 20010012 | 2024-12-01 08:00:00+00:00 | Acetaminophen | analgesic | 1000 | mg | po |`,
  },
  {
    id: 'medication_orders',
    name: 'Medication Orders',
    description: 'This table captures all medication orders placed for patients, including start and stop times.',
    fields: [
      {
        name: 'hospitalization_id',
        type: 'VARCHAR',
        description: 'Unique identifier for each hospitalization encounter',
        restrictions: 'No restriction',
      },
      {
        name: 'order_dttm',
        type: 'DATETIME',
        description: 'Date and time when order was placed',
        restrictions: 'Datetime format should be YYYY-MM-DD HH:MM:SS+00:00 (UTC)',
      },
      {
        name: 'start_dttm',
        type: 'DATETIME',
        description: 'Start date and time of medication order',
        restrictions: 'Datetime format should be YYYY-MM-DD HH:MM:SS+00:00 (UTC)',
      },
      {
        name: 'stop_dttm',
        type: 'DATETIME',
        description: 'Stop date and time of medication order',
        restrictions: 'Datetime format should be YYYY-MM-DD HH:MM:SS+00:00 (UTC)',
      },
      {
        name: 'medication_name',
        type: 'VARCHAR',
        description: 'Name of the medication',
        restrictions: 'No restriction',
      },
      {
        name: 'order_status',
        type: 'VARCHAR',
        description: 'Status of the order',
        values: ['active', 'completed', 'discontinued', 'cancelled', 'suspended'],
      },
    ],
    notes: [
      'Captures all medication orders with timing',
      'Includes both continuous and intermittent orders',
    ],
    example: `| hospitalization_id | order_dttm | start_dttm | stop_dttm | medication_name | order_status |
|---|---|---|---|---|---|
| 20010012 | 2024-12-01 08:00:00+00:00 | 2024-12-01 09:00:00+00:00 | 2024-12-03 09:00:00+00:00 | Vancomycin | active |`,
  },
  {
    id: 'microbiology_culture',
    name: 'Microbiology Culture',
    description: 'This table contains results from microbiological cultures including blood, urine, sputum, and other specimens.',
    fields: [
      {
        name: 'hospitalization_id',
        type: 'VARCHAR',
        description: 'Unique identifier for each hospitalization encounter',
        restrictions: 'No restriction',
      },
      {
        name: 'culture_dttm',
        type: 'DATETIME',
        description: 'Date and time when culture was collected',
        restrictions: 'Datetime format should be YYYY-MM-DD HH:MM:SS+00:00 (UTC)',
      },
      {
        name: 'specimen_type',
        type: 'VARCHAR',
        description: 'Type of specimen cultured',
        values: ['blood', 'urine', 'sputum', 'wound', 'csf', 'other'],
      },
      {
        name: 'organism_name',
        type: 'VARCHAR',
        description: 'Name of identified organism',
        restrictions: 'No restriction',
      },
      {
        name: 'culture_result',
        type: 'VARCHAR',
        description: 'Result of culture',
        values: ['positive', 'negative', 'contaminated', 'pending'],
      },
      {
        name: 'result_dttm',
        type: 'DATETIME',
        description: 'Date and time when result was available',
        restrictions: 'Datetime format should be YYYY-MM-DD HH:MM:SS+00:00 (UTC)',
      },
    ],
    notes: [
      'Captures microbiological culture results',
      'Links to sensitivity table for antimicrobial testing',
    ],
    example: `| hospitalization_id | culture_dttm | specimen_type | organism_name | culture_result | result_dttm |
|---|---|---|---|---|---|
| 20010012 | 2024-12-01 10:00:00+00:00 | blood | Staphylococcus aureus | positive | 2024-12-02 08:00:00+00:00 |`,
  },
  {
    id: 'microbiology_non_culture',
    name: 'Microbiology Non-culture',
    description: 'This table captures non-culture based microbiology results including PCR, antigens, and other rapid diagnostics.',
    fields: [
      {
        name: 'hospitalization_id',
        type: 'VARCHAR',
        description: 'Unique identifier for each hospitalization encounter',
        restrictions: 'No restriction',
      },
      {
        name: 'test_dttm',
        type: 'DATETIME',
        description: 'Date and time when test was performed',
        restrictions: 'Datetime format should be YYYY-MM-DD HH:MM:SS+00:00 (UTC)',
      },
      {
        name: 'test_name',
        type: 'VARCHAR',
        description: 'Name of the test',
        restrictions: 'No restriction',
      },
      {
        name: 'test_category',
        type: 'VARCHAR',
        description: 'Category of test',
        values: ['pcr', 'antigen', 'molecular', 'rapid', 'other'],
      },
      {
        name: 'test_result',
        type: 'VARCHAR',
        description: 'Result of the test',
        values: ['positive', 'negative', 'indeterminate', 'pending'],
      },
      {
        name: 'result_dttm',
        type: 'DATETIME',
        description: 'Date and time when result was available',
        restrictions: 'Datetime format should be YYYY-MM-DD HH:MM:SS+00:00 (UTC)',
      },
    ],
    notes: [
      'Captures non-culture microbiology diagnostics',
      'Includes PCR, antigens, and rapid tests',
    ],
    example: `| hospitalization_id | test_dttm | test_name | test_category | test_result | result_dttm |
|---|---|---|---|---|---|
| 20010012 | 2024-12-01 10:00:00+00:00 | COVID-19 PCR | pcr | negative | 2024-12-01 14:00:00+00:00 |`,
  },
  {
    id: 'procedures',
    name: 'Procedures',
    description: 'This table documents all procedures performed during the hospitalization.',
    fields: [
      {
        name: 'hospitalization_id',
        type: 'VARCHAR',
        description: 'Unique identifier for each hospitalization encounter',
        restrictions: 'No restriction',
      },
      {
        name: 'procedure_dttm',
        type: 'DATETIME',
        description: 'Date and time when procedure was performed',
        restrictions: 'Datetime format should be YYYY-MM-DD HH:MM:SS+00:00 (UTC)',
      },
      {
        name: 'procedure_code',
        type: 'VARCHAR',
        description: 'Procedure code (CPT, ICD-10-PCS, etc.)',
        restrictions: 'No restriction',
      },
      {
        name: 'procedure_description',
        type: 'VARCHAR',
        description: 'Description of the procedure',
        restrictions: 'No restriction',
      },
      {
        name: 'procedure_category',
        type: 'VARCHAR',
        description: 'Category of procedure',
        values: ['surgical', 'diagnostic', 'therapeutic', 'monitoring', 'other'],
      },
      {
        name: 'provider_specialty',
        type: 'VARCHAR',
        description: 'Specialty of performing provider',
        restrictions: 'No restriction',
      },
    ],
    notes: [
      'Documents all procedures during hospitalization',
      'Supports multiple procedure coding systems',
    ],
    example: `| hospitalization_id | procedure_dttm | procedure_code | procedure_description | procedure_category | provider_specialty |
|---|---|---|---|---|---|
| 20010012 | 2024-12-01 14:00:00+00:00 | 31500 | Intubation | therapeutic | Anesthesiology |`,
  },
  {
    id: 'provider',
    name: 'Provider',
    description: 'This table links healthcare providers to patient encounters and captures provider specialty and role information.',
    fields: [
      {
        name: 'hospitalization_id',
        type: 'VARCHAR',
        description: 'Unique identifier for each hospitalization encounter',
        restrictions: 'No restriction',
      },
      {
        name: 'provider_id',
        type: 'VARCHAR',
        description: 'Unique identifier for healthcare provider',
        restrictions: 'No restriction',
      },
      {
        name: 'provider_role',
        type: 'VARCHAR',
        description: 'Role of the provider',
        values: ['attending', 'resident', 'fellow', 'nurse', 'pharmacist', 'therapist', 'other'],
      },
      {
        name: 'provider_specialty',
        type: 'VARCHAR',
        description: 'Specialty of the provider',
        restrictions: 'No restriction',
      },
      {
        name: 'encounter_start_dttm',
        type: 'DATETIME',
        description: 'Start of provider involvement',
        restrictions: 'Datetime format should be YYYY-MM-DD HH:MM:SS+00:00 (UTC)',
      },
      {
        name: 'encounter_end_dttm',
        type: 'DATETIME',
        description: 'End of provider involvement',
        restrictions: 'Datetime format should be YYYY-MM-DD HH:MM:SS+00:00 (UTC)',
      },
    ],
    notes: [
      'Links providers to patient encounters',
      'Captures provider roles and specialties',
    ],
    example: `| hospitalization_id | provider_id | provider_role | provider_specialty | encounter_start_dttm | encounter_end_dttm |
|---|---|---|---|---|---|
| 20010012 | PROV001 | attending | Critical Care Medicine | 2024-12-01 07:00:00+00:00 | 2024-12-05 19:00:00+00:00 |`,
  },
  {
    id: 'sensitivity',
    name: 'Sensitivity',
    description: 'This table contains antimicrobial sensitivity testing results linked to positive cultures.',
    fields: [
      {
        name: 'hospitalization_id',
        type: 'VARCHAR',
        description: 'Unique identifier for each hospitalization encounter',
        restrictions: 'No restriction',
      },
      {
        name: 'culture_dttm',
        type: 'DATETIME',
        description: 'Date and time when original culture was collected',
        restrictions: 'Datetime format should be YYYY-MM-DD HH:MM:SS+00:00 (UTC)',
      },
      {
        name: 'organism_name',
        type: 'VARCHAR',
        description: 'Name of the organism tested',
        restrictions: 'No restriction',
      },
      {
        name: 'antibiotic_name',
        type: 'VARCHAR',
        description: 'Name of antibiotic tested',
        restrictions: 'No restriction',
      },
      {
        name: 'sensitivity_result',
        type: 'VARCHAR',
        description: 'Result of sensitivity testing',
        values: ['sensitive', 'resistant', 'intermediate', 'not_tested'],
      },
      {
        name: 'mic_value',
        type: 'DOUBLE',
        description: 'Minimum inhibitory concentration',
        restrictions: 'Numeric',
      },
    ],
    notes: [
      'Linked to positive cultures from microbiology_culture table',
      'Provides antimicrobial susceptibility data',
    ],
    example: `| hospitalization_id | culture_dttm | organism_name | antibiotic_name | sensitivity_result | mic_value |
|---|---|---|---|---|---|
| 20010012 | 2024-12-01 10:00:00+00:00 | Staphylococcus aureus | Vancomycin | sensitive | 1.0 |`,
  },
  {
    id: 'therapy_details',
    name: 'Therapy Details',
    description: 'This table provides granular details about specific therapies and interventions.',
    fields: [
      {
        name: 'hospitalization_id',
        type: 'VARCHAR',
        description: 'Unique identifier for each hospitalization encounter',
        restrictions: 'No restriction',
      },
      {
        name: 'therapy_start_dttm',
        type: 'DATETIME',
        description: 'Start date and time of therapy',
        restrictions: 'Datetime format should be YYYY-MM-DD HH:MM:SS+00:00 (UTC)',
      },
      {
        name: 'therapy_end_dttm',
        type: 'DATETIME',
        description: 'End date and time of therapy',
        restrictions: 'Datetime format should be YYYY-MM-DD HH:MM:SS+00:00 (UTC)',
      },
      {
        name: 'therapy_name',
        type: 'VARCHAR',
        description: 'Name of the therapy',
        restrictions: 'No restriction',
      },
      {
        name: 'therapy_category',
        type: 'VARCHAR',
        description: 'Category of therapy',
        values: ['respiratory', 'renal', 'cardiac', 'neurological', 'other'],
      },
      {
        name: 'therapy_parameters',
        type: 'VARCHAR',
        description: 'JSON or text description of therapy parameters',
        restrictions: 'No restriction',
      },
    ],
    notes: [
      'Captures detailed therapy and intervention data',
      'Flexible structure for various therapy types',
    ],
    example: `| hospitalization_id | therapy_start_dttm | therapy_end_dttm | therapy_name | therapy_category | therapy_parameters |
|---|---|---|---|---|---|
| 20010012 | 2024-12-01 12:00:00+00:00 | 2024-12-02 12:00:00+00:00 | Prone positioning | respiratory | {"duration_hours": 16, "frequency": "daily"} |`,
  },
  {
    id: 'transfusion',
    name: 'Transfusion',
    description: 'This table provides detailed information about transfusion events linked to specific hospitalizations.',
    fields: [
      {
        name: 'hospitalization_id',
        type: 'VARCHAR',
        description: 'Unique identifier for each hospitalization encounter',
        restrictions: 'No restriction',
      },
      {
        name: 'transfusion_dttm',
        type: 'DATETIME',
        description: 'Date and time when transfusion was administered',
        restrictions: 'Datetime format should be YYYY-MM-DD HH:MM:SS+00:00 (UTC)',
      },
      {
        name: 'blood_product_type',
        type: 'VARCHAR',
        description: 'Type of blood product transfused',
        values: ['packed_rbc', 'fresh_frozen_plasma', 'platelets', 'cryoprecipitate', 'whole_blood', 'other'],
      },
      {
        name: 'units_transfused',
        type: 'DOUBLE',
        description: 'Number of units transfused',
        restrictions: 'Numeric',
      },
      {
        name: 'volume_ml',
        type: 'DOUBLE',
        description: 'Volume transfused in mL',
        restrictions: 'Numeric',
      },
      {
        name: 'indication',
        type: 'VARCHAR',
        description: 'Indication for transfusion',
        restrictions: 'No restriction',
      },
    ],
    notes: [
      'Captures all blood product transfusions',
      'Links transfusions to specific hospitalizations',
    ],
    example: `| hospitalization_id | transfusion_dttm | blood_product_type | units_transfused | volume_ml | indication |
|---|---|---|---|---|---|
| 20010012 | 2024-12-01 16:00:00+00:00 | packed_rbc | 2 | 700 | Anemia with hemoglobin < 7 g/dL |`,
  },
];

// Define Future tables
const futureTables = [
  {
    id: 'clinical_decision_support',
    name: 'Clinical Decision Support',
    description: 'This table will capture the actions of clinical decision support tools embedded in the EHR. The table will have the following fields: cds_name, cds_category, cds_value, cds_trigger_ddtm.',
  },
];
---

<BaseLayout
  title="CLIF-2.0.0 Data Dictionary"
  description="Comprehensive guide to the Common Longitudinal ICU data Format version 2.0.0, detailing structure and purpose of each table"
>
  <!-- Sticky Navigation Bar -->
  <nav class="sticky top-0 z-50 bg-white/95 backdrop-blur-sm border-b border-gray-200 shadow-sm">
    <div class="container mx-auto px-6 py-4">
      <div class="flex items-center justify-between">
        <div class="flex items-center space-x-6">
          <h2 class="text-lg font-semibold text-gray-800">CLIF 2.0.0</h2>
          <div class="hidden md:flex items-center space-x-6">
            <a href="#beta-tables" class="text-sm text-gray-600 hover:text-clif-burgundy transition-colors">Beta Tables (9)</a>
            <a href="#concept-tables" class="text-sm text-gray-600 hover:text-clif-burgundy transition-colors">Concept Tables (16)</a>
            <a href="#future-tables" class="text-sm text-gray-600 hover:text-clif-burgundy transition-colors">Future Tables (1)</a>
          </div>
        </div>
        <div class="flex items-center space-x-4">
          <a href="/data-dictionary" class="text-sm text-gray-600 hover:text-clif-burgundy transition-colors">← Back to Versions</a>
          <button
            id="search-toggle"
            class="p-2 text-gray-600 hover:text-clif-burgundy transition-colors"
            aria-label="Search tables"
          >
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
            </svg>
          </button>
        </div>
      </div>
    </div>
  </nav>

  <!-- Search Overlay -->
  <div id="search-overlay" class="hidden fixed inset-0 z-50 bg-black/50 backdrop-blur-sm">
    <div class="container mx-auto px-6 py-20">
      <div class="max-w-2xl mx-auto bg-white rounded-xl shadow-2xl p-6">
        <div class="flex items-center justify-between mb-4">
          <h3 class="text-lg font-semibold text-gray-800">Search Tables</h3>
          <button id="search-close" class="text-gray-400 hover:text-gray-600">
            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
            </svg>
          </button>
        </div>
        <input
          type="text"
          id="global-search"
          placeholder="Search tables, fields, or descriptions..."
          class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-clif-burgundy focus:border-transparent"
          autofocus
        />
        <div id="search-results" class="mt-4 max-h-96 overflow-y-auto"></div>
      </div>
    </div>
  </div>

  <div class="container mx-auto px-6 py-12">
    <!-- Header Section with Enhanced Design -->
    <div class="mb-12">
      <div class="flex items-center mb-6">
        <h1 class="text-4xl font-bold text-clif-burgundy">
          CLIF-2.0.0 Data Dictionary
        </h1>
        <Badge type="beta" class="ml-4" />
      </div>
    </div>

    <!-- Interactive ERD Section -->
    <div class="mb-16">
      <InteractiveERDOptimized 
        tables={[...betaTables, ...conceptTables, ...futureTables]}
        height="min(800px, 80vh)"
        enableKeyboardNavigation={true}
        enableSearch={true}
        showLegend={true}
        showFullscreenButton={true}
        className="shadow-xl"
      />
    </div>

    <!-- Stats Section -->
    <div class="mb-12">
      <!-- Quick Stats with Enhanced Design -->
      <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-10">
        <div class="group relative overflow-hidden bg-white rounded-2xl border border-yellow-200 shadow-sm hover:shadow-xl transition-all duration-300">
          <div class="absolute inset-0 bg-gradient-to-br from-yellow-50 via-yellow-100/50 to-transparent opacity-60"></div>
          <div class="relative p-6">
            <div class="flex items-center justify-between mb-3">
              <div class="p-3 bg-yellow-100 rounded-xl">
                <svg class="w-8 h-8 text-yellow-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                </svg>
              </div>
              <Badge type="beta" size="small" />
            </div>
            <div>
              <p class="text-3xl font-bold text-gray-900 mb-1">9</p>
              <p class="text-sm text-gray-600 font-medium">Beta Tables</p>
              <p class="text-xs text-gray-500 mt-1">Production-ready</p>
            </div>
          </div>
          <div class="absolute bottom-0 left-0 right-0 h-1 bg-gradient-to-r from-yellow-400 to-yellow-500 transform scale-x-0 group-hover:scale-x-100 transition-transform duration-300"></div>
        </div>
        
        <div class="group relative overflow-hidden bg-white rounded-2xl border border-purple-200 shadow-sm hover:shadow-xl transition-all duration-300">
          <div class="absolute inset-0 bg-gradient-to-br from-purple-50 via-purple-100/50 to-transparent opacity-60"></div>
          <div class="relative p-6">
            <div class="flex items-center justify-between mb-3">
              <div class="p-3 bg-purple-100 rounded-xl">
                <svg class="w-8 h-8 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
                </svg>
              </div>
              <Badge type="concept" size="small" />
            </div>
            <div>
              <p class="text-3xl font-bold text-gray-900 mb-1">16</p>
              <p class="text-sm text-gray-600 font-medium">Concept Tables</p>
              <p class="text-xs text-gray-500 mt-1">In development</p>
            </div>
          </div>
          <div class="absolute bottom-0 left-0 right-0 h-1 bg-gradient-to-r from-purple-400 to-purple-500 transform scale-x-0 group-hover:scale-x-100 transition-transform duration-300"></div>
        </div>
        
        <div class="group relative overflow-hidden bg-white rounded-2xl border border-blue-200 shadow-sm hover:shadow-xl transition-all duration-300">
          <div class="absolute inset-0 bg-gradient-to-br from-blue-50 via-blue-100/50 to-transparent opacity-60"></div>
          <div class="relative p-6">
            <div class="flex items-center justify-between mb-3">
              <div class="p-3 bg-blue-100 rounded-xl">
                <svg class="w-8 h-8 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
              </div>
              <Badge type="future" size="small" />
            </div>
            <div>
              <p class="text-3xl font-bold text-gray-900 mb-1">1</p>
              <p class="text-sm text-gray-600 font-medium">Future Tables</p>
              <p class="text-xs text-gray-500 mt-1">Proposed</p>
            </div>
          </div>
          <div class="absolute bottom-0 left-0 right-0 h-1 bg-gradient-to-r from-blue-400 to-blue-500 transform scale-x-0 group-hover:scale-x-100 transition-transform duration-300"></div>
      </div>

      <div class="prose prose-lg max-w-none mb-8">
        <p class="text-xl text-gray-700 leading-relaxed">
          The CLIF Data Dictionary serves as a comprehensive guide to the Common Longitudinal ICU
          data Format, detailing the structure and purpose of each table within the framework.
          Designed to standardize and harmonize electronic health record data across multiple
          institutions, the dictionary outlines the entity-relationship model, variable definitions,
          and permissible values.
        </p>
      </div>

    </div>

    <!-- Beta Tables Section -->
    <section id="beta-tables" class="mb-16 scroll-mt-20">
      <div class="mb-8">
        <div class="flex items-center justify-between mb-6">
          <h2 class="text-3xl font-bold text-clif-burgundy flex items-center">
            Beta Tables
            <Badge type="beta" class="ml-3" />
          </h2>
          <button
            id="expand-all-beta"
            class="text-sm text-gray-600 hover:text-clif-burgundy transition-colors flex items-center gap-2"
          >
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
            </svg>
            Expand All
          </button>
        </div>
        <p class="text-lg text-gray-700 leading-relaxed">
          The table purpose, structure, and field names for beta tables is complete and used in at
          least one federated CLIF project. The <a href="/mCIDE" class="text-clif-burgundy hover:underline font-medium">minimum Common ICU Data Elements (mCIDE)</a> for category variables is defined. Actively testing the table's practical use in projects.
          Breaking changes unlikely, but backward compatible updates in future minor versions possible.
        </p>
      </div>

      <!-- Enhanced Table Grid Navigation -->
      <div class="grid grid-cols-2 md:grid-cols-3 gap-4 mb-10">
        {betaTables.map((table, index) => (
          <a
            href={`#${table.id}`}
            class="group relative p-5 bg-white border-2 border-gray-200 rounded-xl hover:border-yellow-400 hover:shadow-lg transition-all duration-200 overflow-hidden"
          >
            <div class="absolute top-2 right-2 text-5xl font-bold text-gray-100 group-hover:text-yellow-100 transition-colors">
              {String(index + 1).padStart(2, '0')}
            </div>
            <div class="relative">
              <h3 class="font-bold text-gray-800 group-hover:text-gray-900 transition-colors mb-1">
                {table.name}
              </h3>
              <div class="flex items-center gap-2">
                <Badge type="beta" size="small" />
                <p class="text-xs text-gray-500">View details →</p>
              </div>
            </div>
            <div class="absolute bottom-0 left-0 right-0 h-0.5 bg-gradient-to-r from-yellow-400 to-yellow-500 transform scale-x-0 group-hover:scale-x-100 transition-transform duration-300"></div>
          </a>
        ))}
      </div>

      {betaTables.map((table, index) => (
        <div
          id={table.id}
          class="mb-12 scroll-mt-28 group"
          data-table-section
        >
          <div class="border-l-4 border-clif-burgundy pl-6">
            <div class="flex items-center justify-between mb-4">
              <h3 class="text-2xl font-semibold text-gray-800 flex items-center">
                <span class="text-clif-burgundy mr-3">{index + 1}.</span>
                {table.name}
                <Badge type="beta" class="ml-3" size="small" />
              </h3>
              <button
                class="collapse-toggle text-gray-400 hover:text-gray-600 transition-colors"
                aria-label="Toggle table visibility"
                data-table-id={table.id}
              >
                <svg class="w-6 h-6 transform transition-transform" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                </svg>
              </button>
            </div>
            <p class="mb-6 text-gray-700 leading-relaxed">{table.description}</p>
          </div>

          <div class="collapsible-content">
            <div class="overflow-x-auto rounded-xl border border-gray-200 shadow-md hover:shadow-lg transition-shadow duration-200">
              <table class="min-w-full divide-y divide-gray-200">
                <thead class="bg-gradient-to-r from-gray-50 to-gray-100 sticky top-0 z-10">
                  <tr>
                    <th class="px-6 py-4 text-left text-xs font-bold text-gray-700 uppercase tracking-wider">Field</th>
                    <th class="px-6 py-4 text-left text-xs font-bold text-gray-700 uppercase tracking-wider w-32">Type</th>
                    <th class="px-6 py-4 text-left text-xs font-bold text-gray-700 uppercase tracking-wider">Description</th>
                    <th class="px-6 py-4 text-left text-xs font-bold text-gray-700 uppercase tracking-wider w-64">Permissible Values</th>
                  </tr>
                </thead>
                <tbody class="bg-white divide-y divide-gray-200">
                  {table.fields.map((field) => (
                    <tr class="hover:bg-gray-50 transition-colors">
                      <td class="px-6 py-4 whitespace-nowrap text-sm font-mono text-gray-900">
                        {field.name}
                      </td>
                      <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                        <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                          {field.type}
                        </span>
                      </td>
                      <td class="px-6 py-4 text-sm text-gray-900">{field.description}</td>
                      <td class="px-6 py-4 text-sm text-gray-500">
                        {field.values ? (
                          <div class="flex flex-wrap gap-1">
                            {field.values.map((value) => (
                              <code class="inline-block text-xs bg-blue-50 text-blue-700 px-2 py-1 rounded font-mono">{value}</code>
                            ))}
                          </div>
                        ) : field.restrictions ? (
                          <span class="text-sm text-gray-600">{field.restrictions}</span>
                        ) : (
                          <span class="text-gray-400">No restrictions</span>
                        )}
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
            {/* Notes section with improved styling */}
            {table.notes && table.notes.length > 0 && (
              <div class="mt-6 bg-gradient-to-r from-blue-50 to-blue-100/50 p-5 rounded-lg border border-blue-200">
                <h4 class="font-semibold text-blue-900 mb-3 flex items-center">
                  <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                  </svg>
                  Important Notes
                </h4>
                <ul class="space-y-2">
                  {table.notes.map((note) => (
                    <li class="flex items-start">
                      <span class="text-blue-500 mr-2 mt-0.5">•</span>
                      <span class="text-sm text-blue-800">{note}</span>
                    </li>
                  ))}
                </ul>
              </div>
            )}
            {/* Example section with syntax highlighting */}
            {table.example && (
              <div class="mt-6">
                <h4 class="font-semibold text-gray-700 mb-3 flex items-center">
                  <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 20l4-16m4 4l4 4-4 4M6 16l-4-4 4-4"></path>
                  </svg>
                  Example Data
                </h4>
                <div class="overflow-x-auto bg-gray-900 rounded-lg shadow-inner">
                  <pre class="text-xs text-gray-300 p-4">
                    <code>{table.example}</code>
                  </pre>
                </div>
              </div>
            )}
          </div>
        </div>
      ))}
    </section>

    <!-- Concept Tables Section -->
    <section id="concept-tables" class="mb-16 scroll-mt-20">
      <div class="mb-8">
        <h2 class="text-3xl font-bold text-clif-burgundy mb-6 flex items-center">
          Concept Tables
          <Badge type="concept" class="ml-3" />
        </h2>
        <p class="text-lg text-gray-700 leading-relaxed">
          A planned future CLIF table that has yet to be used in a federated project. The table structure and CDE elements are in draft form. Permissible values of category variables may still need to be defined. Seeking conceptual feedback. Significant changes to all aspects of the table are possible.
        </p>
      </div>
      
      <!-- Concept Tables Grid with Enhanced Cards -->
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-5">
        {
          conceptTables.map((table, index) => (
            <div
              id={table.id}
              class="group relative bg-white rounded-2xl border-2 border-purple-100 p-6 hover:border-purple-400 hover:shadow-xl transition-all duration-300 scroll-mt-28 overflow-hidden"
            >
              <div class="absolute -top-2 -right-2 w-16 h-16 bg-gradient-to-br from-purple-100 to-purple-200 rounded-bl-2xl flex items-center justify-center">
                <span class="text-xl font-bold text-purple-700">{String(index + 1).padStart(2, '0')}</span>
              </div>
              <div class="mb-3">
                <Badge type="concept" size="small" />
              </div>
              <h3 class="text-lg font-bold text-gray-800 mb-2 pr-12 group-hover:text-purple-700 transition-colors">
                {table.name}
              </h3>
              <p class="text-sm text-gray-600 leading-relaxed line-clamp-3">{table.description}</p>
              <div class="absolute bottom-0 left-0 right-0 h-1 bg-gradient-to-r from-purple-400 to-purple-500 transform scale-x-0 group-hover:scale-x-100 transition-transform duration-300"></div>
            </div>
          ))
        }
      </div>
    </section>

    <!-- Future Tables Section -->
    <section id="future-tables" class="mb-16 scroll-mt-20">
      <div class="mb-8">
        <h2 class="text-3xl font-bold text-clif-burgundy mb-6">Future Proposed Tables</h2>
        <p class="text-lg text-gray-700 leading-relaxed">
          These are tables without any defined structure that the consortium has not yet committed to implementing.
        </p>
      </div>
      <div class="max-w-3xl mx-auto">
        {
          futureTables.map((table) => (
            <div
              id={table.id}
              class="relative bg-gradient-to-br from-blue-50 to-indigo-50 border-2 border-dashed border-blue-300 rounded-2xl p-8 hover:border-blue-400 hover:shadow-lg transition-all duration-300 group"
            >
              <div class="absolute -top-3 left-8">
                <Badge type="future" size="small" />
              </div>
              <div class="flex items-start gap-4">
                <div class="p-3 bg-blue-100 rounded-xl group-hover:bg-blue-200 transition-colors">
                  <svg class="w-8 h-8 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z"></path>
                  </svg>
                </div>
                <div class="flex-1">
                  <h3 class="text-2xl font-bold text-gray-800 mb-3">{table.name}</h3>
                  <p class="text-gray-700 leading-relaxed">{table.description}</p>
                  <div class="mt-4 inline-flex items-center text-sm text-blue-600 font-medium">
                    <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                    </svg>
                    Coming in future releases
                  </div>
                </div>
              </div>
            </div>
          ))
        }
      </div>
    </section>

    <!-- Additional Information -->
    <section class="mt-16 p-8 bg-gradient-to-r from-clif-burgundy to-clif-burgundy-dark text-white rounded-xl shadow-xl">
      <div class="flex items-center justify-between flex-wrap gap-6">
        <div class="flex-1">
          <h2 class="text-2xl font-bold mb-4">Need Help Understanding CLIF?</h2>
          <p class="mb-6 text-white/90">
            Our custom AI assistant can help you understand CLIF table structures, field definitions,
            and implementation best practices.
          </p>
        </div>
        <div class="flex items-center">
          <svg class="w-20 h-20 text-white/20" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M9.75 17L9 20l-1 1h8l-1-1-.75-3M3 13h18M5 17h14a2 2 0 002-2V5a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"></path>
          </svg>
        </div>
      </div>
      <a
        href="https://chatgpt.com/g/g-h1nk6d3eR-clif-assistant"
        target="_blank"
        rel="noopener noreferrer"
        class="inline-flex items-center px-6 py-3 bg-white text-clif-burgundy font-semibold rounded-lg hover:bg-gray-100 transition-colors"
      >
        <svg class="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 20 20">
          <path d="M11 3a1 1 0 100 2h2.586l-6.293 6.293a1 1 0 101.414 1.414L15 6.414V9a1 1 0 102 0V4a1 1 0 00-1-1h-5z" />
          <path d="M5 5a2 2 0 00-2 2v8a2 2 0 002 2h8a2 2 0 002-2v-3a1 1 0 10-2 0v3H5V7h3a1 1 0 000-2H5z" />
        </svg>
        Chat with CLIF Assistant
      </a>
    </section>
  </div>

  <style>
    /* Utility class for line clamping */
    .line-clamp-3 {
      display: -webkit-box;
      -webkit-line-clamp: 3;
      -webkit-box-orient: vertical;
      overflow: hidden;
    }
  </style>

  <!-- JavaScript for interactivity -->
  <script define:vars={{ betaTables }}>
    // Make tables data available globally
    window.betaTables = betaTables;
  </script>
  <script>
    document.addEventListener('DOMContentLoaded', () => {
      // Search functionality
      const searchToggle = document.getElementById('search-toggle');
      const searchOverlay = document.getElementById('search-overlay');
      const searchClose = document.getElementById('search-close');
      const globalSearch = document.getElementById('global-search');
      const searchResults = document.getElementById('search-results');

      searchToggle?.addEventListener('click', () => {
        searchOverlay?.classList.remove('hidden');
        globalSearch?.focus();
      });

      searchClose?.addEventListener('click', () => {
        searchOverlay?.classList.add('hidden');
        globalSearch!.value = '';
        searchResults!.innerHTML = '';
      });

      searchOverlay?.addEventListener('click', (e) => {
        if (e.target === searchOverlay) {
          searchOverlay.classList.add('hidden');
        }
      });


      // Global search implementation
      globalSearch?.addEventListener('input', (e) => {
        const query = (e.target as HTMLInputElement).value.toLowerCase();
        if (query.length < 2) {
          searchResults!.innerHTML = '';
          return;
        }

        const results: any[] = [];

        // Search through beta tables
        const betaTables = window.betaTables || [];
        betaTables.forEach((table: any) => {
          if (table.name.toLowerCase().includes(query) || 
              table.description.toLowerCase().includes(query)) {
            results.push({
              type: 'table',
              category: 'beta',
              name: table.name,
              id: table.id,
              description: table.description.substring(0, 100) + '...'
            });
          }

          table.fields.forEach((field: any) => {
            if (field.name.toLowerCase().includes(query) ||
                field.description.toLowerCase().includes(query)) {
              results.push({
                type: 'field',
                category: 'beta',
                tableName: table.name,
                tableId: table.id,
                name: field.name,
                description: field.description.substring(0, 100) + '...'
              });
            }
          });
        });

        // Display results
        if (results.length > 0) {
          searchResults!.innerHTML = results.slice(0, 10).map(result => {
            if (result.type === 'table') {
              return `
                <a href="#${result.id}" class="block p-3 hover:bg-gray-50 rounded-lg transition-colors" onclick="document.getElementById('search-overlay').classList.add('hidden')">
                  <div class="flex items-start">
                    <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${result.category === 'beta' ? 'bg-yellow-100 text-yellow-800' : 'bg-purple-100 text-purple-800'} mr-3">
                      ${result.category}
                    </span>
                    <div>
                      <h4 class="font-semibold text-gray-900">${result.name}</h4>
                      <p class="text-sm text-gray-600 mt-1">${result.description}</p>
                    </div>
                  </div>
                </a>
              `;
            } else {
              return `
                <a href="#${result.tableId}" class="block p-3 hover:bg-gray-50 rounded-lg transition-colors" onclick="document.getElementById('search-overlay').classList.add('hidden')">
                  <div class="flex items-start">
                    <svg class="w-5 h-5 text-gray-400 mr-3 mt-0.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path>
                    </svg>
                    <div>
                      <h4 class="font-semibold text-gray-900">${result.name}</h4>
                      <p class="text-sm text-gray-500">Field in ${result.tableName}</p>
                      <p class="text-sm text-gray-600 mt-1">${result.description}</p>
                    </div>
                  </div>
                </a>
              `;
            }
          }).join('');
        } else {
          searchResults!.innerHTML = '<p class="p-4 text-gray-500 text-center">No results found</p>';
        }
      });

      // Collapse/expand functionality
      const collapseToggles = document.querySelectorAll('.collapse-toggle');
      const expandAllBtn = document.getElementById('expand-all-beta');
      let allExpanded = true;

      collapseToggles.forEach(toggle => {
        toggle.addEventListener('click', () => {
          const content = toggle.closest('[data-table-section]')?.querySelector('.collapsible-content');
          const icon = toggle.querySelector('svg');
          
          if (content?.classList.contains('hidden')) {
            content.classList.remove('hidden');
            icon?.classList.remove('rotate-180');
          } else {
            content?.classList.add('hidden');
            icon?.classList.add('rotate-180');
          }
        });
      });

      expandAllBtn?.addEventListener('click', () => {
        const contents = document.querySelectorAll('.collapsible-content');
        const icons = document.querySelectorAll('.collapse-toggle svg');
        
        if (allExpanded) {
          contents.forEach(content => content.classList.add('hidden'));
          icons.forEach(icon => icon.classList.add('rotate-180'));
          expandAllBtn.innerHTML = '<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 8h16M4 16h16"></path></svg>Collapse All';
        } else {
          contents.forEach(content => content.classList.remove('hidden'));
          icons.forEach(icon => icon.classList.remove('rotate-180'));
          expandAllBtn.innerHTML = '<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path></svg>Expand All';
        }
        allExpanded = !allExpanded;
      });


      // Smooth scroll for navigation links
      document.querySelectorAll('a[href^="#"]').forEach(anchor => {
        anchor.addEventListener('click', function (e) {
          e.preventDefault();
          const target = document.querySelector(this.getAttribute('href')!);
          if (target) {
            target.scrollIntoView({ behavior: 'smooth', block: 'start' });
          }
        });
      });

      // Active section highlighting
      const observer = new IntersectionObserver(
        (entries) => {
          entries.forEach((entry) => {
            const id = entry.target.getAttribute('id');
            const navLink = document.querySelector(`nav a[href="#${id}"]`);
            
            if (entry.isIntersecting) {
              navLink?.classList.add('text-clif-burgundy', 'font-semibold');
              navLink?.classList.remove('text-gray-600');
            } else {
              navLink?.classList.remove('text-clif-burgundy', 'font-semibold');
              navLink?.classList.add('text-gray-600');
            }
          });
        },
        { rootMargin: '-20% 0px -60% 0px' }
      );

      document.querySelectorAll('section[id]').forEach((section) => {
        observer.observe(section);
      });
    });
  </script>

  <style>
    /* Custom styles for enhanced UI */
    .collapsible-content {
      transition: all 0.3s ease-in-out;
    }

    .collapsible-content.hidden {
      opacity: 0;
      max-height: 0;
      overflow: hidden;
    }

    .rotate-180 {
      transform: rotate(180deg);
    }

    /* Improve table scroll on mobile */
    @media (max-width: 768px) {
      .overflow-x-auto {
        -webkit-overflow-scrolling: touch;
      }
      
      .overflow-x-auto::-webkit-scrollbar {
        height: 8px;
      }
      
      .overflow-x-auto::-webkit-scrollbar-track {
        background: #f3f4f6;
      }
      
      .overflow-x-auto::-webkit-scrollbar-thumb {
        background: #9ca3af;
        border-radius: 4px;
      }
    }

    /* Print styles */
    @media print {
      nav, #search-toggle, .collapse-toggle, #expand-all-beta {
        display: none !important;
      }
      
      .collapsible-content {
        display: block !important;
        opacity: 1 !important;
        max-height: none !important;
      }
    }
  </style>
</BaseLayout>