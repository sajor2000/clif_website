---
import BaseLayout from '../../layouts/BaseLayout.astro';
import Badge from '../../components/Badge.astro';
import CTAButton from '../../components/shared/CTAButton.astro';
import MarkdownIt from 'markdown-it';
import fs from 'node:fs';
import path from 'node:path';

// Read the markdown file at build time
const markdownPath = path.join(process.cwd(), 'src/content/clif-data-dictionary-2.0.0.md');
const markdownContent = fs.readFileSync(markdownPath, 'utf-8');

// Initialize markdown-it with custom options
const md = new MarkdownIt({
  html: true,
  breaks: true,
  linkify: true,
  typographer: true
});

// Custom renderer for headings to remove [Anchor] links and add styling
md.renderer.rules.heading_open = function(tokens, idx, options, env, renderer) {
  const token = tokens[idx];
  const level = token.tag.substring(1); // Extract number from h1, h2, etc.
  
  // Get the text content from the next token
  let headingText = '';
  if (tokens[idx + 1] && tokens[idx + 1].type === 'inline') {
    headingText = tokens[idx + 1].content;
  }
  
  // Remove [Anchor] links from heading text
  const cleanText = headingText.replace(/\s*\[Anchor\]\s*\(.*?\)\s*$/, '');
  
  // Create a clean ID from the text
  const id = cleanText.toLowerCase().replace(/[^a-z0-9]+/g, '-');
  
  // Add classes based on heading level
  const levelClasses = {
    '1': 'text-3xl font-bold mb-6 mt-8 text-clif-burgundy scroll-mt-20',
    '2': 'text-2xl font-semibold mb-4 mt-6 text-gray-900 scroll-mt-20 border-b border-gray-200 pb-2',
    '3': 'text-xl font-semibold mb-3 mt-4 text-gray-800 scroll-mt-20',
    '4': 'text-lg font-medium mb-2 mt-3 text-gray-700 scroll-mt-20',
  };
  
  return `<h${level} id="${id}" class="${levelClasses[level] || ''}">`;
};

// Custom renderer for inline content to clean up [Anchor] links
md.renderer.rules.link_open = function(tokens, idx, options, env, renderer) {
  const token = tokens[idx];
  const href = token.attrGet('href');
  
  // Skip rendering [Anchor] links
  if (tokens[idx + 1] && tokens[idx + 1].content === 'Anchor') {
    return '';
  }
  
  return `<a href="${href}">`;
};

md.renderer.rules.link_close = function(tokens, idx, options, env, renderer) {
  // Skip closing tag for [Anchor] links
  if (idx > 0 && tokens[idx - 1] && tokens[idx - 1].content === 'Anchor') {
    return '';
  }
  
  return '</a>';
};

// Custom renderer for inline tokens to remove [Anchor] text
md.renderer.rules.text = function(tokens, idx, options, env, renderer) {
  const token = tokens[idx];
  // Skip "Anchor" text nodes
  if (token.content === 'Anchor') {
    return '';
  }
  return md.utils.escapeHtml(token.content);
};

// Custom renderer for tables
md.renderer.rules.table_open = function() {
  return '<div class="table-wrapper overflow-x-auto rounded-lg shadow-sm border border-gray-200 my-6"><table class="min-w-full divide-y divide-gray-200">';
};

md.renderer.rules.table_close = function() {
  return '</table></div>';
};

md.renderer.rules.thead_open = function() {
  return '<thead class="bg-gray-50 sticky top-0 z-10">';
};

md.renderer.rules.tbody_open = function() {
  return '<tbody class="bg-white divide-y divide-gray-200">';
};

md.renderer.rules.th_open = function(tokens, idx) {
  const token = tokens[idx];
  const align = token.attrGet('style');
  let alignClass = '';
  
  if (align && align.includes('text-align:center')) alignClass = 'text-center';
  else if (align && align.includes('text-align:right')) alignClass = 'text-right';
  
  return `<th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider bg-gray-50 ${alignClass}">`;
};

md.renderer.rules.td_open = function(tokens, idx) {
  const token = tokens[idx];
  const align = token.attrGet('style');
  let alignClass = '';
  
  if (align && align.includes('text-align:center')) alignClass = 'text-center';
  else if (align && align.includes('text-align:right')) alignClass = 'text-right';
  
  return `<td class="px-6 py-4 text-sm text-gray-900 ${alignClass}">`;
};

// Convert markdown to HTML
let processedHtml = md.render(markdownContent);

// Fix image paths
processedHtml = processedHtml.replace(
  /https:\/\/clif-consortium\.github\.io\/website\/images\//g,
  '/images/'
);

// Replace badge images with styled versions
processedHtml = processedHtml.replace(
  /!\[\]\(https:\/\/img\.shields\.io\/badge\/Maturity-Beta-yellow\.png\)/g,
  '<span class="badge-beta">Beta</span>'
);

processedHtml = processedHtml.replace(
  /!\[\]\(https:\/\/img\.shields\.io\/badge\/Maturity-Concept-orange\.png\)/g,
  '<span class="badge-concept">Concept</span>'
);

// Also replace img tags for badges (in case they were already converted)
processedHtml = processedHtml.replace(
  /<img[^>]*src="https:\/\/img\.shields\.io\/badge\/Maturity-Beta-yellow\.png"[^>]*>/g,
  '<span class="badge-beta">Beta</span>'
);

processedHtml = processedHtml.replace(
  /<img[^>]*src="https:\/\/img\.shields\.io\/badge\/Maturity-Concept-orange\.png"[^>]*>/g,
  '<span class="badge-concept">Concept</span>'
);

// Apply comprehensive color scheme to data dictionary tables
function applyColorScheme(html) {
  // Helper function to wrap text in color span
  function colorWrap(text, colorClass) {
    return `<span class="${colorClass}">${text}</span>`;
  }
  
  // Process definition tables (tables with Column | Type | Description headers)
  html = html.replace(/<table[^>]*>[\s\S]*?<\/table>/g, (tableMatch) => {
    // Check if this is a definition table
    if (tableMatch.includes('<th') && tableMatch.includes('Column') && tableMatch.includes('Type')) {
      // Process each row
      return tableMatch.replace(/<tr>[\s\S]*?<\/tr>/g, (rowMatch) => {
        // Skip header row
        if (rowMatch.includes('<th')) return rowMatch;
        
        // Process table cells
        return rowMatch.replace(/<td[^>]*>(.*?)<\/td>/g, (cellMatch, content, offset, string) => {
          // Determine which column we're in
          const cellsBefore = string.substring(0, offset).split('<td').length - 1;
          const columnIndex = cellsBefore % 5; // Assuming 5 columns: Column, Type, Description, Permissible Values, Notes
          
          // Column 0: Field names
          if (columnIndex === 0) {
            // Remove any existing escapes
            let fieldName = content.replace(/\\_/g, '_').trim();
            
            // Apply colors based on field name patterns
            if (fieldName.endsWith('_id') || fieldName === 'patient_id' || fieldName === 'hospitalization_id') {
              return cellMatch.replace(content, colorWrap(fieldName, 'text-clif-burgundy font-semibold'));
            } else if (fieldName.endsWith('_dttm') || fieldName.endsWith('_date') || fieldName.endsWith('_time')) {
              return cellMatch.replace(content, colorWrap(fieldName, 'text-blue-600 font-medium'));
            } else if (fieldName.endsWith('_category')) {
              return cellMatch.replace(content, colorWrap(fieldName, 'text-emerald-600 font-medium'));
            } else if (fieldName.endsWith('_name')) {
              return cellMatch.replace(content, colorWrap(fieldName, 'text-gray-600'));
            } else if (fieldName.includes('_value') || fieldName.includes('_numeric') || 
                      fieldName.includes('_count') || fieldName.includes('_dose') ||
                      fieldName.includes('_rate') || fieldName.includes('_volume') ||
                      fieldName.includes('_pressure') || fieldName.includes('_flow') ||
                      fieldName === 'age' || fieldName.includes('_age') ||
                      fieldName.includes('reference_unit') || fieldName.includes('_unit')) {
              return cellMatch.replace(content, colorWrap(fieldName, 'text-cyan-600 font-medium'));
            } else if (fieldName.endsWith('_type') || fieldName.endsWith('_code') || 
                      fieldName.endsWith('_status') || fieldName.endsWith('_mode')) {
              return cellMatch.replace(content, colorWrap(fieldName, 'text-purple-600 font-medium'));
            }
          }
          
          // Column 1: Data types
          if (columnIndex === 1) {
            if (content.includes('DOUBLE') || content.includes('INT') || content.includes('NUMERIC')) {
              return cellMatch.replace(content, colorWrap(content, 'text-cyan-600'));
            } else if (content.includes('DATETIME')) {
              return cellMatch.replace(content, colorWrap(content, 'text-blue-600'));
            }
          }
          
          // Column 3: Permissible values
          if (columnIndex === 3 && content.trim() !== 'No restriction' && content.trim() !== '') {
            // Special handling for datetime formats
            if (content.includes('YYYY-MM-DD') || content.includes('HH:MM:SS') || content.includes('UTC')) {
              let newContent = content.replace(/(YYYY-MM-DD HH:MM:SS\+00:00)/g, (match) => {
                return `<code class="text-blue-600 font-mono text-sm bg-blue-50 px-1 rounded">${match}</code>`;
              });
              return cellMatch.replace(content, newContent);
            }
            
            // Color categorical values in both backticks and code tags
            let newContent = content;
            
            // Handle backtick format
            newContent = newContent.replace(/`([^`]+)`/g, (match, value) => {
              return `<code class="text-purple-600 font-mono text-sm bg-purple-50 px-1 rounded">${value}</code>`;
            });
            
            // Handle already converted code tags
            newContent = newContent.replace(/<code>([^<]+)<\/code>/g, (match, value) => {
              return `<code class="text-purple-600 font-mono text-sm bg-purple-50 px-1 rounded">${value}</code>`;
            });
            
            return cellMatch.replace(content, newContent);
          }
          
          return cellMatch;
        });
      });
    }
    return tableMatch;
  });
  
  // Process cross-references in descriptions (italicize field names that appear in descriptions)
  html = html.replace(/<td[^>]*>(.*?)<\/td>/g, (match, content) => {
    // Look for field names in description text
    const fieldPattern = /\b(\w+_(id|dttm|date|time|category|name|value|numeric|count|dose))\b/g;
    if (fieldPattern.test(content) && !content.includes('<span')) {
      return match.replace(content, content.replace(fieldPattern, (fieldMatch) => {
        // Determine color based on suffix
        let colorClass = 'italic ';
        if (fieldMatch.endsWith('_id')) colorClass += 'text-clif-burgundy';
        else if (fieldMatch.endsWith('_dttm') || fieldMatch.endsWith('_date') || fieldMatch.endsWith('_time')) colorClass += 'text-blue-600';
        else if (fieldMatch.endsWith('_category')) colorClass += 'text-emerald-600';
        else if (fieldMatch.endsWith('_name')) colorClass += 'text-gray-600';
        else colorClass += 'text-cyan-600';
        
        return colorWrap(fieldMatch, colorClass);
      }));
    }
    return match;
  });
  
  return html;
}

// Apply the color scheme
processedHtml = applyColorScheme(processedHtml);

// Extract ONLY actual data tables for sidebar (the 25 tables)
const dataTableNames = [
  // Beta tables (9)
  'ADT', 'Hospitalization', 'Labs', 'Medication Admin Continuous', 'Patient', 
  'Patient Assessments', 'Position', 'Respiratory Support', 'Vitals',
  // Concept tables (16)  
  'Code Status', 'CRRT Therapy', 'ECMO_MCS', 'Hospital Diagnosis', 'Intake_Output',
  'Invasive Hemodynamics', 'Key ICU orders', 'Medication Admin Intermittent', 
  'Medication Orders', 'Microbiology Culture', 'Microbiology Non-culture', 
  'Procedures', 'Provider', 'Sensitivity', 'Therapy Details', 'Transfusion'
];

// Determine which tables are Beta vs Concept based on content
const betaTables = dataTableNames.slice(0, 9);
const conceptTables = dataTableNames.slice(9);
---

<BaseLayout title="CLIF Data Dictionary 2.0.0" description="CLIF Consortium Data Dictionary version 2.0.0">
  <main class="container mx-auto px-4 md:px-8 py-8">
    <div class="max-w-7xl mx-auto">
      
      <!-- Clean, simple header -->
      <header class="mb-8 p-6 bg-gray-50 rounded-lg border">
        <h1 class="text-3xl font-bold mb-3 text-gray-900">CLIF Data Dictionary 2.0.0</h1>
        <div class="flex items-center gap-3 mb-3">
          <Badge type="beta" size="large" />
          <span class="text-gray-600 font-medium">Current Version</span>
        </div>
        <p class="text-gray-700">
          The comprehensive guide to the Common Longitudinal ICU data Format, detailing structure, 
          variables, and permissible values for standardized critical care data.
        </p>
      </header>

      <!-- Main content layout -->
      <div class="lg:grid lg:grid-cols-4 lg:gap-8">
        
        <!-- Clean sidebar with ONLY actual data tables -->
        <aside class="hidden lg:block lg:col-span-1">
          <nav class="sticky top-20 bg-white rounded-lg border p-4 max-h-[calc(100vh-6rem)] overflow-y-auto">
            <h2 class="text-lg font-semibold mb-4 text-gray-900">Data Tables</h2>
            
            <!-- Search for tables only -->
            <div class="mb-4">
              <input 
                type="text" 
                id="table-search"
                placeholder="Search tables..."
                class="w-full px-3 py-2 text-sm border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
            </div>

            <!-- Beta Tables -->
            <div class="mb-4">
              <button 
                id="beta-toggle"
                class="w-full flex items-center justify-between p-2 text-left rounded hover:bg-gray-50"
                aria-expanded="true"
              >
                <div class="flex items-center gap-2">
                  <svg class="w-4 h-4 transform transition-transform" id="beta-chevron" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                  </svg>
                  <span class="font-medium">Beta Tables</span>
                  <span class="text-xs bg-orange-100 text-orange-800 px-2 py-1 rounded-full">{betaTables.length}</span>
                </div>
              </button>
              <div id="beta-tables" class="mt-2 pl-6 space-y-1">
                {betaTables.map(tableName => (
                  <a 
                    href={`#${tableName.toLowerCase().replace(/[^a-z0-9]+/g, '-')}`}
                    class="table-link block py-1 px-2 text-sm text-gray-600 hover:text-blue-600 hover:bg-gray-50 rounded"
                    data-table-name={tableName.toLowerCase()}
                  >
                    {tableName}
                  </a>
                ))}
              </div>
            </div>

            <!-- Concept Tables -->
            <div class="mb-4">
              <button 
                id="concept-toggle"
                class="w-full flex items-center justify-between p-2 text-left rounded hover:bg-gray-50"
                aria-expanded="true"
              >
                <div class="flex items-center gap-2">
                  <svg class="w-4 h-4 transform transition-transform" id="concept-chevron" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                  </svg>
                  <span class="font-medium">Concept Tables</span>
                  <span class="text-xs bg-purple-100 text-purple-800 px-2 py-1 rounded-full">{conceptTables.length}</span>
                </div>
              </button>
              <div id="concept-tables" class="mt-2 pl-6 space-y-1">
                {conceptTables.map(tableName => (
                  <a 
                    href={`#${tableName.toLowerCase().replace(/[^a-z0-9]+/g, '-')}`}
                    class="table-link block py-1 px-2 text-sm text-gray-600 hover:text-blue-600 hover:bg-gray-50 rounded"
                    data-table-name={tableName.toLowerCase()}
                  >
                    {tableName}
                  </a>
                ))}
              </div>
            </div>
          </nav>
        </aside>

        <!-- Main content area -->
        <article class="lg:col-span-3">
          <div class="markdown-content prose max-w-none">
            <div set:html={processedHtml} />
          </div>
        </article>
      </div>

      <!-- Navigation -->
      <div class="mt-12 flex justify-center">
        <CTAButton href="/data-dictionary" ariaLabel="Back to Data Dictionary versions">
          Back to Documentation
        </CTAButton>
      </div>
    </div>
  </main>

  <style>
    /* Enhanced markdown content styling */
    .markdown-content {
      @apply text-gray-800;
    }

    /* Table wrapper styling */
    .table-wrapper {
      @apply -mx-4 px-4 md:mx-0 md:px-0;
    }

    /* Enhanced table styling */
    .markdown-content table {
      @apply w-full;
    }

    .markdown-content tbody tr {
      @apply transition-colors duration-150;
    }

    .markdown-content tbody tr:nth-child(even) {
      @apply bg-gray-50/50;
    }

    .markdown-content tbody tr:hover {
      @apply bg-blue-50/30;
    }

    /* Code styling improvements */
    .markdown-content code {
      @apply bg-gray-100 px-2 py-1 rounded text-sm font-mono text-gray-800 border border-gray-200;
    }

    .markdown-content pre {
      @apply bg-gray-900 text-gray-100 p-4 rounded-lg overflow-x-auto mb-4 shadow-md border border-gray-800;
    }

    .markdown-content pre code {
      @apply bg-transparent p-0 border-0;
    }

    /* Table code styling */
    .markdown-content td code {
      @apply text-xs px-1.5 py-0.5;
    }

    /* Link styling */
    .markdown-content a {
      @apply text-clif-burgundy hover:text-clif-burgundy-dark underline decoration-1 underline-offset-2 transition-colors duration-200;
    }

    /* List styling */
    .markdown-content ul {
      @apply list-disc list-outside mb-4 ml-6 space-y-1;
    }

    .markdown-content ol {
      @apply list-decimal list-outside mb-4 ml-6 space-y-1;
    }

    .markdown-content li {
      @apply mb-2 leading-relaxed;
    }

    /* Nested lists */
    .markdown-content li ul,
    .markdown-content li ol {
      @apply mt-2 mb-2;
    }

    /* Paragraph spacing */
    .markdown-content p {
      @apply mb-4 leading-relaxed;
    }

    /* Images */
    .markdown-content img {
      @apply max-w-full h-auto mx-auto my-6 rounded-lg shadow-lg border border-gray-200;
    }

    /* Blockquotes */
    .markdown-content blockquote {
      @apply border-l-4 border-blue-500/50 pl-4 italic my-4 text-gray-700 bg-blue-50/20 py-2 pr-4 rounded-r;
    }

    /* Strong text */
    .markdown-content strong {
      @apply font-semibold text-gray-900;
    }

    /* Badge styling */
    .badge-beta {
      @apply inline-flex items-center gap-1 px-3 py-1 text-sm font-bold rounded-full shadow-sm;
      @apply bg-gradient-to-r from-orange-400 to-orange-500 text-white border border-orange-600;
    }

    .badge-concept {
      @apply inline-flex items-center gap-1 px-3 py-1 text-sm font-bold rounded-full shadow-sm;
      @apply bg-gradient-to-r from-purple-400 to-purple-500 text-white border border-purple-600;
    }

    /* Table links */
    .table-link {
      @apply block py-1 px-2 text-sm text-gray-600 hover:text-blue-600 hover:bg-gray-50 rounded;
    }

    .table-link.active {
      @apply text-blue-600 bg-blue-50 font-medium;
    }

    /* Responsive improvements */
    @media (max-width: 768px) {
      .markdown-content table {
        @apply text-xs;
      }
      
      .markdown-content th,
      .markdown-content td {
        @apply px-3 py-2;
      }

      .markdown-content h1 {
        @apply text-2xl;
      }

      .markdown-content h2 {
        @apply text-xl;
      }

      .markdown-content h3 {
        @apply text-lg;
      }
    }

    /* Smooth scroll behavior */
    html {
      scroll-behavior: smooth;
    }
  </style>

  <script>
    document.addEventListener('DOMContentLoaded', () => {
      // Simple sidebar functionality
      const betaToggle = document.getElementById('beta-toggle');
      const conceptToggle = document.getElementById('concept-toggle');
      const betaTables = document.getElementById('beta-tables');
      const conceptTables = document.getElementById('concept-tables');
      const betaChevron = document.getElementById('beta-chevron');
      const conceptChevron = document.getElementById('concept-chevron');
      const searchInput = document.getElementById('table-search');
      const tableLinks = document.querySelectorAll('.table-link');

      // Toggle sections
      function toggleSection(section, chevron, button) {
        const isExpanded = button.getAttribute('aria-expanded') === 'true';
        button.setAttribute('aria-expanded', !isExpanded);
        
        if (isExpanded) {
          section.style.display = 'none';
          chevron.style.transform = 'rotate(-90deg)';
        } else {
          section.style.display = 'block';
          chevron.style.transform = 'rotate(0deg)';
        }
      }

      betaToggle?.addEventListener('click', () => {
        toggleSection(betaTables, betaChevron, betaToggle);
      });

      conceptToggle?.addEventListener('click', () => {
        toggleSection(conceptTables, conceptChevron, conceptToggle);
      });

      // Simple search
      searchInput?.addEventListener('input', (e) => {
        const searchTerm = e.target.value.toLowerCase();
        
        tableLinks.forEach(link => {
          const tableName = link.getAttribute('data-table-name');
          if (tableName && tableName.includes(searchTerm)) {
            link.style.display = 'block';
          } else {
            link.style.display = 'none';
          }
        });
      });

      // Smooth scrolling and active link highlighting
      const observerOptions = {
        rootMargin: '-20% 0px -70% 0px',
        threshold: 0
      };

      const observer = new IntersectionObserver((entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            const id = entry.target.id;
            tableLinks.forEach((link) => {
              if (link.getAttribute('href') === `#${id}`) {
                link.classList.add('active');
              } else {
                link.classList.remove('active');
              }
            });
          }
        });
      }, observerOptions);

      // Observe all headings for active highlighting
      const headings = document.querySelectorAll('.markdown-content h1, .markdown-content h2, .markdown-content h3');
      headings.forEach((heading) => {
        if (heading.id) {
          observer.observe(heading);
        }
      });

      // Smooth scrolling
      tableLinks.forEach(link => {
        link.addEventListener('click', (e) => {
          e.preventDefault();
          const targetId = link.getAttribute('href').substring(1);
          const targetElement = document.getElementById(targetId);
          
          if (targetElement) {
            targetElement.scrollIntoView({
              behavior: 'smooth',
              block: 'start'
            });
          }
        });
      });
    });
  </script>
</BaseLayout>